anova_table[0:-5]
anova_table <- anova(mod_3, mod_2, mod_1, mod_0)
anova_table[0:-5]
anova_table <- anova(mod_3, mod_2)
anova_table[0:-5]
anova_table <- anova(mod_3, mod_2, mod_1, mod_0)
anova_table[0:-5]
mod_3_obj <- summary(mod_3)
mod_3_obj$coefficients
#plotting only group-level function
data_exp_1_3$fit_part_best <- fitted.values(mod_3)
data_exp_1_3 %>%
ggplot(aes(target.frames, fit_part_best)) +
geom_point() +
geom_smooth(method = "glm", method.args = list(family = "binomial"), se = FALSE, fullrange = TRUE) +
xlim(0,8) +
ylab("Fitted Values") +
xlab("Number of Target Frames") +
ggtitle("Plotting of The Best Performing Model")
#plotting only group-level function
# data_exp_1_3$fit_part_best <- fitted.values(mod_3)
#
# data_exp_1_3 %>%
#   ggplot(aes(target.frames, fit_part_best)) +
#   geom_point() +
#   geom_smooth(method = "glm", method.args = list(family = "binomial"), se = FALSE, fullrange = TRUE) +
#   xlim(0,8) +
#   ylab("Fitted Values") +
#   xlab("Number of Target Frames") +
#   ggtitle("Plotting of The Best Performing Model")
#plotting only subject-specific functions
# data_exp_1_3$fit_part_best <- fitted.values(mod_3)
#
# data_exp_1_3 %>%
#   ggplot(aes(target.frames, fit_part_best)) +
# #  geom_line() +
#   geom_point() +
#   geom_smooth(method = "glm", method.args = list(family = "binomial"), se = FALSE, fullrange = TRUE) +
#   xlim(0,8) +
#   facet_wrap(~subject) +
#   ylab("Fitted Values") +
#   xlab("Number of Target Frames") +
#   ggtitle("Plotting of The Best Performing Model as Subject-Specific Functions")
#plotting group-level function and subject-specific functions in one plot
data_exp_1_3$fit_part_best <- fitted.values(mod_3)
data_exp_1_3 %>%
ggplot(aes(target.frames, fit_part_best, colour = subject)) +
#  geom_line() +
geom_point(aes(x = target.frames)) +
geom_smooth(method = "glm", method.args = list(family = "binomial"), se = FALSE, fullrange = TRUE) +
geom_smooth(aes(target.frames, fit_part_best), colour = "black", size = 2, method = "glm", method.args = list(family = "binomial"), se = FALSE, fullrange = TRUE) +
xlim(0,8) +
ylab("Fitted Values") +
xlab("Number of Target Frames") +
ggtitle("Plotting of both The Best Performing Model as group-level function and as Subject-Specific Functions")
#plotting only subject-specific functions
data_exp_1_3$fit_part_best <- fitted.values(mod_3)
data_exp_1_3 %>%
ggplot(aes(target.frames, fit_part_best)) +
#  geom_line() +
geom_point() +
geom_smooth(method = "glm", method.args = list(family = "binomial"), se = FALSE, fullrange = TRUE) +
xlim(0,8) +
facet_wrap(~subject) +
ylab("Fitted Values") +
xlab("Number of Target Frames") +
ggtitle("Plotting of The Best Performing Model as Subject-Specific Functions")
data_exp_1_3_sub_24 <- data_exp_1_3 %>%
filter(subject == 24)
l_24 <- log_likelihood(data_exp_1_3_sub_24$fit_part_best, data_exp_1_3_sub_24$correct)
p_chance <- rep(c(0.50), nrow(data_exp_1_3_sub_24))
l_chance <- log_likelihood(p_chance, data_exp_1_3_sub_24$correct)
l_r_test <- -2*(l_24-l_chance)
l_r_test
p_value <- pchisq(q=l_r_test, df=2, lower.tail=TRUE)
data_exp_1_3_sub_24 <- data_exp_1_3 %>%
filter(subject == 24)
t.test(as.numeric(data_exp_1_3_sub_24$correct), mu = 0.5, alternative = "greater")
knitr::opts_chunk$set(echo = TRUE)
#plotting only group-level function
# data_exp_1_3$fit_part_best <- fitted.values(mod_3)
#
# data_exp_1_3 %>%
#   ggplot(aes(target.frames, fit_part_best)) +
#   geom_point() +
#   geom_smooth(method = "glm", method.args = list(family = "binomial"), se = FALSE, fullrange = TRUE) +
#   xlim(0,8) +
#   ylab("Fitted Values") +
#   xlab("Number of Target Frames") +
#   ggtitle("Plotting of The Best Performing Model")
knitr::opts_chunk$set(echo = TRUE)
pacman::p_load(tidyverse, lme4, readbulk, grid, gridExtra, MuMIn, dfoptim, multcomp,lmtest)
data_exp_1 <- read_bulk("experiment_1", extension = ".csv")
#the function read_bulk already does exactly this. As a courtesy I have calculated the number of na's to show it
sum(is.na(data_exp_1$seed))
glimpse(data_exp_1)
data_exp_1_1 <- data_exp_1
#it could be argued that some of the following variables should be kept as numerical data if it was relevant for a later analysis
data_exp_1_1$pas <- as.factor(data_exp_1_1$pas)
data_exp_1_1$trial <- as.factor(data_exp_1_1$trial)
data_exp_1_1$cue <- as.factor(data_exp_1_1$cue)
data_exp_1_1$even.digit <- as.factor(data_exp_1_1$even.digit)
data_exp_1_1$seed <- as.factor(data_exp_1_1$seed)
data_exp_1_1$subject <- as.character(data_exp_1_1$subject)
data_exp_1_2 <- data_exp_1_1 %>%
filter(trial.type != "practice")
data_exp_1_2$correct <- ifelse(data_exp_1_2$target.type == "odd" & data_exp_1_2$obj.resp == "o", 1, ifelse(data_exp_1_2$target.type == "even" & data_exp_1_2$obj.resp == "e", 1, 0))
data_exp_2 <- read_bulk("experiment_2", extension = ".csv")
#create column initialising from what experiment each observation is from
data_exp_2$df <- 2
data_exp_1$df <- 1
#merging the two dataframes
data_exp_both <- rbind(data_exp_1, data_exp_2)
#visualising target.contrast as a histogram
data_exp_both %>%
ggplot(aes(x = target.contrast)) +
geom_histogram(binwidth = 0.01) +
facet_wrap(~df) +
ggtitle("Histogram of target.contrast")
#visualising target.frames as a histogram
data_exp_both %>%
ggplot(aes(x = target.frames)) +
geom_histogram(binwidth = 0.1) +
facet_wrap(~df) +
ggtitle("Histogram of target.frames")
mod_1_pool <- glm(correct ~ target.frames, data = data_exp_1_2, family = 'binomial')
mod_1_part <- glmer(correct ~ target.frames + (1|subject), data = data_exp_1_2, family = 'binomial')
likelihood <- function(p_i, y_i){
prod(p_i**y_i * (1-p_i)**(1-y_i))
}
log_likelihood <- function(p_i, y_i){
sum(y_i * log(p_i) + (1-y_i) * log(1- p_i))
}
data_exp_1_3 <- data_exp_1_2
data_exp_1_3$fit_pool <- mod_1_pool$fitted.values
likelihood_mod_1 <- likelihood(data_exp_1_3$fit_pool, data_exp_1_3$correct)
log_likelihood_mod_1 <- log_likelihood(data_exp_1_3$fit_pool, data_exp_1_3$correct)
log_likelihood_mod_1_true <- logLik(mod_1_pool)
print(c(likelihood_mod_1, log_likelihood_mod_1, log_likelihood_mod_1_true))
print(c(paste("Likelihood of the complete pooling model is", likelihood_mod_1), paste("Log likelihood from own function is", log_likelihood_mod_1), paste("Log likelihood from logLik function is", log_likelihood_mod_1_true)))
data_exp_1_3$fit_part <- fitted(mod_1_part)
likelihood_mod_2 <- likelihood(data_exp_1_3$fit_part, data_exp_1_3$correct)
log_likelihood_mod_2 <- log_likelihood(data_exp_1_3$fit_part, data_exp_1_3$correct)
log_likelihood_mod_2_true <- logLik(mod_1_part)
print(c(paste("Likelihood of the partial pooling model is", likelihood_mod_2), paste("Log likelihood from own function is", log_likelihood_mod_2), paste("Log likelihood from logLik function is", log_likelihood_mod_2_true)))
mod_0 <- glm(correct ~ 1, data = data_exp_1_2, family = 'binomial')
mod_1 <- glmer(correct ~ 1 + (1|subject), data = data_exp_1_2, family = 'binomial')
mod_2 <- glmer(correct ~ target.frames + (1|subject), data = data_exp_1_2, family = 'binomial')
mod_3 <- glmer(correct ~ target.frames + (target.frames|subject), data = data_exp_1_2, family = 'binomial')
VarCorr(mod_3)
anova_table <- anova(mod_3, mod_2, mod_1, mod_0)
anova_table[0:-5]
mod_3_obj <- summary(mod_3)
mod_3_obj$coefficients
#plotting group-level function and subject-specific functions in one plot
data_exp_1_3$fit_part_best <- fitted.values(mod_3)
data_exp_1_3 %>%
ggplot(aes(target.frames, fit_part_best, colour = subject)) +
#  geom_line() +
geom_point(aes(x = target.frames)) +
geom_smooth(size = 0.5, method = "glm", method.args = list(family = "binomial"), se = FALSE, fullrange = TRUE) +
geom_smooth(aes(target.frames, fit_part_best), colour = "black", size = 2, method = "glm", method.args = list(family = "binomial"), se = FALSE, fullrange = TRUE) +
xlim(0,8) +
ylab("Fitted Values") +
xlab("Number of Target Frames") +
ggtitle("Plotting of both The Best Performing Model as group-level function and as Subject-Specific Functions")
#plotting only subject-specific functions
data_exp_1_3$fit_part_best <- fitted.values(mod_3)
data_exp_1_3 %>%
ggplot(aes(target.frames, fit_part_best)) +
#  geom_line() +
geom_point() +
geom_smooth(method = "glm", method.args = list(family = "binomial"), se = FALSE, fullrange = TRUE) +
xlim(0,8) +
facet_wrap(~subject) +
ylab("Fitted Values") +
xlab("Number of Target Frames") +
ggtitle("Plotting of The Best Performing Model as Subject-Specific Functions")
#plotting only group-level function
# data_exp_1_3$fit_part_best <- fitted.values(mod_3)
#
# data_exp_1_3 %>%
#   ggplot(aes(target.frames, fit_part_best)) +
#   geom_point() +
#   geom_smooth(method = "glm", method.args = list(family = "binomial"), se = FALSE, fullrange = TRUE) +
#   xlim(0,8) +
#   ylab("Fitted Values") +
#   xlab("Number of Target Frames") +
#   ggtitle("Plotting of The Best Performing Model")
data_exp_1_3_sub_24 <- data_exp_1_3 %>%
filter(subject == 24)
t.test(as.numeric(data_exp_1_3_sub_24$correct), mu = 0.5, alternative = "greater")
mod_4 <- glmer(correct ~ target.frames + pas + (target.frames|subject), data = data_exp_1_2, family = 'binomial')
#mod_4 <- glmer(correct ~ target.frames + pas + (target.frames|subject), data = data_exp_1_2, family = 'binomial', control = glmerControl(optimize = "bobyqa"))
mod_5 <- glmer(correct ~ pas*target.frames + (target.frames|subject), data = data_exp_1_2, family = 'binomial')
#mod_5 <- glmer(correct ~ pas*target.frames + (target.frames|subject), data = data_exp_1_2, family = 'binomial', control = glmerControl(optimize = "bobyqa"))
anova_table_2 <- anova(mod_1, mod_2, mod_3, mod_4, mod_5)
anova_table_2[0:-5]
anova_table_2 <- anova(mod_5, mod_4, mod_3, mod_2, mod_1, mod_0)
anova_table_2[0:-5]
#plotting only group-level function
data_exp_1_3$fit_mod_5 <- fitted.values(mod_5)
#this is doing the plot as a facetwrap, so it will create 4 individual functions. But would it not be nice to have all in one? One solution could be to create 4 individual dataframes and 4 individual geom_smooths in the same plot
data_exp_1_3 %>%
ggplot(aes(target.frames, fit_mod_5)) +
geom_point() +
geom_smooth(method = "glm", method.args = list(family = "binomial"), se = FALSE, fullrange = TRUE) +
xlim(0,8) +
ylab("Fitted Values") +
xlab("Number of Target Frames") +
ggtitle("Plotting of Model 5 with facet_wrap") +
facet_wrap(~ pas)
#perhaps this will solve it
data_exp_1_3 %>%
ggplot(aes(target.frames, fit_mod_5)) +
geom_point() +
geom_smooth(aes(group = pas), method = "glm", method.args = list(family = "binomial"), se = FALSE, fullrange = TRUE) +
xlim(0,8) +
ylab("Fitted Values") +
xlab("Number of Target Frames") +
ggtitle("Plotting of Model 5 with aes(group = ...)")
#plotting only group-level function
data_exp_1_3$fit_mod_5 <- fitted.values(mod_5)
#perhaps this will solve it
data_exp_1_3 %>%
ggplot(aes(target.frames, fit_mod_5)) +
geom_point() +
geom_smooth(aes(colour = pas), method = "glm", method.args = list(family = "binomial"), se = FALSE, fullrange = TRUE) +
xlim(0,8) +
ylab("Fitted Values") +
xlab("Number of Target Frames") +
ggtitle("Plotting of Model 5 with aes(group = ...)")
summary(mod_5)
summary(mod_5)[1]
summary(mod_5)[2]
summary(mod_5)[3]
summary(mod_5)[4]
summary(mod_5)[5]
summary(mod_5)[10]
summary(mod_5)[10]
inv.logit <- function(x) exp(x) / (1 + exp(x))
inv.logit(-0.1216323)
inv.logit <- function(x) exp(x) / (1 + exp(x))
inv.logit(-0.1216323)
inv.logit(-0.5713832)
inv.logit(-0.5384910)
inv.logit(0.2015129)
#Same as previous model
#mod_5 <- glmer(correct ~ pas*target.frames + (target.frames|subject), data = data_exp_1_2, family = 'binomial')
summary(mod_5)
0.1148 + 0.4472
contrast.vector <- matrix(c(0, 0, 0, 0, 0, 1, 0, 0), nrow=1)
gh <- glht(mod_5, contrast.vector)
print(summary(gh))
#shot in the dark on how to do this
contrast.vector <- matrix(c(0, 0, 0, 0, 0, -1, 1, 0), nrow=1)
gh <- glht(mod_5, contrast.vector)
print(summary(gh))
#shot in the dark on how to do this
contrast.vector <- matrix(c(0, 0, 0, 0, 0, 0, 1, 0), nrow=1)
gh <- glht(mod_5, contrast.vector)
print(summary(gh))
#shot in the dark on how to do this
contrast.vector <- matrix(c(0, 0, 0, 0, 0, -1, 1, 0), nrow=1)
gh <- glht(mod_5, contrast.vector)
print(summary(gh))
#another shot in the dark
contrast.vector <- matrix(c(0, 0, 0, 0, 0, 0, -1, 1), nrow=1)
gh <- glht(mod_5, contrast.vector)
print(summary(gh))
RSS <- function(dataset, par)
{
## "dataset" should be a data.frame containing the variables x (target.frames)
## and y (correct)
## "par" are our four parameters (a numeric vector)
## par[1]=a, par[2]=b, par[3]=c, par[4]=d
x <- dataset$x
y <- dataset$y
y.hat <- par[1] + (par[2] - par[1])/(1 + e**((par[3] - x)/par[4]))## you fill in the estimate of y.hat
RSS <- sum((y - y.hat)^2)
return(RSS)
}
data_exp_1_4 <- data_exp_1_3 %>%
dplyr::select(target.frames, right_answer) %>%
rename(x = target.frames, y = right_answer)
data_exp_1_4 <- data_exp_1_3 %>%
dplyr::select(target.frames, correct) %>%
rename(x = target.frames, y = correct)
sub_7 <- data_exp_1_4 %>%
filter(subject == 7)
data_exp_1_4 <- data_exp_1_3 %>%
dplyr::select(subject, target.frames, correct) %>%
rename(x = target.frames, y = correct)
sub_7 <- data_exp_1_4 %>%
filter(subject == 7)
sub_7_pas_1 <- data_exp_1_4 %>%
filter(subject == 7 & pas == 1)
data_exp_1_4 <- data_exp_1_3 %>%
dplyr::select(subject, pas, target.frames, correct) %>%
rename(x = target.frames, y = correct)
sub_7 <- data_exp_1_4 %>%
filter(subject == 7)
sub_7_pas_1 <- data_exp_1_4 %>%
filter(subject == 7 & pas == 1)
sub_7_pas_2 <- data_exp_1_4 %>%
filter(subject == 7 & pas == 2)
sub_7_pas_3 <- data_exp_1_4 %>%
filter(subject == 7 & pas == 3)
sub_7_pas_4 <- data_exp_1_4 %>%
filter(subject == 7 & pas == 4)
optim_par_total <- optim(c(0.5, 1.00, 1.00, 1.00), RSS, sub_7, method = 'L-BFGS-B', lower = c(0.5, 0.5, -Inf, -Inf), upper = c(1, 1, Inf, Inf))
optim_par_1 <- optim(c(0.5, 1.00, 1.00, 1.00), RSS, sub_7_pas_1, method = 'L-BFGS-B', lower = c(0.5, 0.5, -Inf, -Inf), upper = c(1, 1, Inf, Inf))
sub_7_pas_2
class(sub_7_pas_2)
sub_7_pas_1$x
optim_par_2 <- optim(c(0.5, 1.00, 1.00, 1.00), RSS, sub_7_pas_2, method = 'L-BFGS-B', lower = c(0.5, 0.5, -Inf, -Inf), upper = c(1, 1, Inf, Inf))
data <- data_exp_1_3 %>%
dplyr::select(target.frames, correct) %>%
rename(x = target.frames, y = correct)
optim(par = c(0.5,1,1,1), fn = RSS, data = data, method = "L-BFGS-B", lower = c(0.5,0.5,-Inf,-Inf),
upper = c(1,1,Inf,Inf))
data <- data_exp_1_3 %>%
dplyr::select(target.frames, correct) %>%
rename(x = target.frames, y = correct)
optim(par = c(0.5,1,1,1), fn = RSS, data = data, method = "L-BFGS-B", lower = c(0.5,0.5,-Inf,-Inf), upper = c(1,1,Inf,Inf))
RSS <- function(dataset, par)
{
## "dataset" should be a data.frame containing the variables x (target.frames)
## and y (correct)
## "par" are our four parameters (a numeric vector)
## par[1]=a, par[2]=b, par[3]=c, par[4]=d
x <- dataset$x
y <- dataset$y
y.hat <- par[1] + (par[2] - par[1])/(1 + exp((par[3] - x)/par[4]))## you fill in the estimate of y.hat
RSS <- sum((y - y.hat)^2)
return(RSS)
}
data_exp_1_4 <- data_exp_1_3 %>%
dplyr::select(subject, pas, target.frames, correct) %>%
rename(x = target.frames, y = correct)
sub_7 <- data_exp_1_4 %>%
filter(subject == 7)
sub_7_pas_1 <- data_exp_1_4 %>%
filter(subject == 7 & pas == 1)
sub_7_pas_2 <- data_exp_1_4 %>%
filter(subject == 7 & pas == 2)
sub_7_pas_3 <- data_exp_1_4 %>%
filter(subject == 7 & pas == 3)
sub_7_pas_4 <- data_exp_1_4 %>%
filter(subject == 7 & pas == 4)
optim_par_total <- optim(c(0.5, 1.00, 1.00, 1.00), RSS, sub_7, method = 'L-BFGS-B', lower = c(0.5, 0.5, -Inf, -Inf), upper = c(1, 1, Inf, Inf))
data <- data_exp_1_3 %>%
dplyr::select(target.frames, correct) %>%
rename(x = target.frames, y = correct)
optim(par = c(0.5,1,1,1), fn = RSS, data = data, method = "L-BFGS-B", lower = c(0.5,0.5,-Inf,-Inf), upper = c(1,1,Inf,Inf))
optim_par_4 <- optim(c(0.25, 1.00, 1.00, 1.00), fn = RSS, sub_7_pas_4, method = 'L-BFGS-B', lower = c(0.5, 0.5, -Inf, -Inf), upper = c(1, 1, Inf, Inf))
optim_par_4 <- optim(c(0.25, 1.00, 1.00, 1.00), fn = RSS, data = sub_7_pas_4, method = 'L-BFGS-B', lower = c(0.5, 0.5, -Inf, -Inf), upper = c(1, 1, Inf, Inf))
data_exp_1_4 <- data_exp_1_3 %>%
dplyr::select(subject, pas, target.frames, correct) %>%
rename(x = target.frames, y = correct)
sub_7 <- data_exp_1_4 %>%
filter(subject == 7)
sub_7_pas_1 <- data_exp_1_4 %>%
filter(subject == 7 & pas == 1)
sub_7_pas_2 <- data_exp_1_4 %>%
filter(subject == 7 & pas == 2)
sub_7_pas_3 <- data_exp_1_4 %>%
filter(subject == 7 & pas == 3)
sub_7_pas_4 <- data_exp_1_4 %>%
filter(subject == 7 & pas == 4)
optim_par_total <- optim(c(0.5, 1.00, 1.00, 1.00), fn = RSS, data = sub_7, method = 'L-BFGS-B', lower = c(0.5, 0.5, -Inf, -Inf), upper = c(1, 1, Inf, Inf))
optim_par_1 <- optim(c(0.5, 1.00, 1.00, 1.00), fn = RSS, data = sub_7_pas_1, method = 'L-BFGS-B', lower = c(0.5, 0.5, -Inf, -Inf), upper = c(1, 1, Inf, Inf))
optim_par_2 <- optim(c(0.5, 1.00, 1.00, 1.00), fn = RSS, data = sub_7_pas_2, method = 'L-BFGS-B', lower = c(0.5, 0.5, -Inf, -Inf), upper = c(1, 1, Inf, Inf))
optim_par_3 <- optim(c(0.5, 1.00, 1.00, 1.00), fn = RSS, data = sub_7_pas_3, method = 'L-BFGS-B', lower = c(0.5, 0.5, -Inf, -Inf), upper = c(1, 1, Inf, Inf))
optim_par_4 <- optim(c(0.25, 1.00, 1.00, 1.00), fn = RSS, data = sub_7_pas_4, method = 'L-BFGS-B', lower = c(0.5, 0.5, -Inf, -Inf), upper = c(1, 1, Inf, Inf))
sub_7$alternative_fit <- optim_par_total[1] + (optim_par_total[2] - optim_par_total[1])/(1 + e**((optim_par_total[3] - sub_7$target.frames)/optim_par_total[4]))
sub_7$alternative_fit <- optim_par_total[1] + (optim_par_total[2] - optim_par_total[1])/(1 + exp((optim_par_total[3] - sub_7$target.frames)/optim_par_total[4]))
data_exp_1_4 <- data_exp_1_3 %>%
dplyr::select(subject, pas, target.frames, correct) %>%
rename(x = target.frames, y = correct)
sub_7 <- data_exp_1_4 %>%
filter(subject == 7)
sub_7_pas_1 <- data_exp_1_4 %>%
filter(subject == 7 & pas == 1)
sub_7_pas_2 <- data_exp_1_4 %>%
filter(subject == 7 & pas == 2)
sub_7_pas_3 <- data_exp_1_4 %>%
filter(subject == 7 & pas == 3)
sub_7_pas_4 <- data_exp_1_4 %>%
filter(subject == 7 & pas == 4)
optim_par_total <- optim(c(0.5, 1.00, 1.00, 1.00), fn = RSS, data = sub_7, method = 'L-BFGS-B', lower = c(0.5, 0.5, -Inf, -Inf), upper = c(1, 1, Inf, Inf))
optim_par_1 <- optim(c(0.5, 1.00, 1.00, 1.00), fn = RSS, data = sub_7_pas_1, method = 'L-BFGS-B', lower = c(0.5, 0.5, -Inf, -Inf), upper = c(1, 1, Inf, Inf))
optim_par_2 <- optim(c(0.5, 1.00, 1.00, 1.00), fn = RSS, data = sub_7_pas_2, method = 'L-BFGS-B', lower = c(0.5, 0.5, -Inf, -Inf), upper = c(1, 1, Inf, Inf))
optim_par_3 <- optim(c(0.5, 1.00, 1.00, 1.00), fn = RSS, data = sub_7_pas_3, method = 'L-BFGS-B', lower = c(0.5, 0.5, -Inf, -Inf), upper = c(1, 1, Inf, Inf))
optim_par_4 <- optim(c(0.25, 1.00, 1.00, 1.00), fn = RSS, data = sub_7_pas_4, method = 'L-BFGS-B', lower = c(0.5, 0.5, -Inf, -Inf), upper = c(1, 1, Inf, Inf))
print(optim_par_total, optim_par_1, optim_par_2, optim_par_3, optim_par_4)
data_exp_1_4 <- data_exp_1_3 %>%
dplyr::select(subject, pas, target.frames, correct) %>%
rename(x = target.frames, y = correct)
sub_7 <- data_exp_1_4 %>%
filter(subject == 7)
sub_7_pas_1 <- data_exp_1_4 %>%
filter(subject == 7 & pas == 1)
sub_7_pas_2 <- data_exp_1_4 %>%
filter(subject == 7 & pas == 2)
sub_7_pas_3 <- data_exp_1_4 %>%
filter(subject == 7 & pas == 3)
sub_7_pas_4 <- data_exp_1_4 %>%
filter(subject == 7 & pas == 4)
optim_par_total <- optim(c(0.5, 1.00, 1.00, 1.00), fn = RSS, data = sub_7, method = 'L-BFGS-B', lower = c(0.5, 0.5, -Inf, -Inf), upper = c(1, 1, Inf, Inf))
optim_par_1 <- optim(c(0.5, 1.00, 1.00, 1.00), fn = RSS, data = sub_7_pas_1, method = 'L-BFGS-B', lower = c(0.5, 0.5, -Inf, -Inf), upper = c(1, 1, Inf, Inf))
optim_par_2 <- optim(c(0.5, 1.00, 1.00, 1.00), fn = RSS, data = sub_7_pas_2, method = 'L-BFGS-B', lower = c(0.5, 0.5, -Inf, -Inf), upper = c(1, 1, Inf, Inf))
optim_par_3 <- optim(c(0.5, 1.00, 1.00, 1.00), fn = RSS, data = sub_7_pas_3, method = 'L-BFGS-B', lower = c(0.5, 0.5, -Inf, -Inf), upper = c(1, 1, Inf, Inf))
optim_par_4 <- optim(c(0.25, 1.00, 1.00, 1.00), fn = RSS, data = sub_7_pas_4, method = 'L-BFGS-B', lower = c(0.5, 0.5, -Inf, -Inf), upper = c(1, 1, Inf, Inf))
print(c(optim_par_total, optim_par_1, optim_par_2, optim_par_3, optim_par_4))
sigmoid <- function(a,b, c,d,x){
y = a + ((b-a)/(1+(exp((c-x)/d))))
return(y)
}
optim_par_total
optim_par_total[1]
optim_par_total
optim_par_total$par
fitfit_funct <- function(x, par){
par[1] + (par[2] - par[1])/(1 + e**((par[3] - x)/par[4]))
}
for (i in range(nrow(sub_7))){
if (sub_7$pas[i] == 1){
sub_7$indi_fit[i] == fitfit_func(sub_7$target.frames[i], optim_par_1)
}
elif (sub_7$pas[i] == 2){
fitfit_funct <- function(x, par){
par[1] + (par[2] - par[1])/(1 + e**((par[3] - x)/par[4]))
}
for (i in range(nrow(sub_7))){
if (sub_7$pas[i] == 1){
sub_7$indi_fit[i] == fitfit_func(sub_7$target.frames[i], optim_par_1)
}
else if (sub_7$pas[i] == 2){
sub_7$indi_fit[i] == fitfit_func(sub_7$target.frames[i], optim_par_2)
}
else if (sub_7$pas[i] == 3){
sub_7$indi_fit[i] == fitfit_func(sub_7$target.frames[i], optim_par_3)
}
else if (sub_7$pas[i] == 4){
sub_7$indi_fit[i] == fitfit_func(sub_7$target.frames[i], optim_par_4)
}
}
fitfit_func <- function(x, par){
par[1] + (par[2] - par[1])/(1 + e**((par[3] - x)/par[4]))
}
for (i in range(nrow(sub_7))){
if (sub_7$pas[i] == 1){
sub_7$indi_fit[i] == fitfit_func(sub_7$target.frames[i], optim_par_1)
}
else if (sub_7$pas[i] == 2){
sub_7$indi_fit[i] == fitfit_func(sub_7$target.frames[i], optim_par_2)
}
else if (sub_7$pas[i] == 3){
sub_7$indi_fit[i] == fitfit_func(sub_7$target.frames[i], optim_par_3)
}
else if (sub_7$pas[i] == 4){
sub_7$indi_fit[i] == fitfit_func(sub_7$target.frames[i], optim_par_4)
}
}
fitfit_func <- function(x, par){
par[1] + (par[2] - par[1])/(1 + e**((par[3] - x)/par[4]))
}
for (i in range(nrow(sub_7))){
if (sub_7$pas[i] == 1){
sub_7$indi_fit[i] == fitfit_func(sub_7$target.frames[i], optim_par_1$par)
}
else if (sub_7$pas[i] == 2){
sub_7$indi_fit[i] == fitfit_func(sub_7$target.frames[i], optim_par_2$par)
}
else if (sub_7$pas[i] == 3){
sub_7$indi_fit[i] == fitfit_func(sub_7$target.frames[i], optim_par_3$par)
}
else if (sub_7$pas[i] == 4){
sub_7$indi_fit[i] == fitfit_func(sub_7$target.frames[i], optim_par_4$par)
}
}
fitfit_func <- function(x, par){
par[1] + (par[2] - par[1])/(1 + exp((par[3] - x)/par[4]))
}
for (i in range(nrow(sub_7))){
if (sub_7$pas[i] == 1){
sub_7$indi_fit[i] == fitfit_func(sub_7$target.frames[i], optim_par_1$par)
}
else if (sub_7$pas[i] == 2){
sub_7$indi_fit[i] == fitfit_func(sub_7$target.frames[i], optim_par_2$par)
}
else if (sub_7$pas[i] == 3){
sub_7$indi_fit[i] == fitfit_func(sub_7$target.frames[i], optim_par_3$par)
}
else if (sub_7$pas[i] == 4){
sub_7$indi_fit[i] == fitfit_func(sub_7$target.frames[i], optim_par_4$par)
}
}
sub_7 %>%
ggplot(aes(target.frames, alternative_fit)) +
geom_point() +
geom_smooth(method = "glm", method.args = list(family = "binomial"), se = FALSE, fullrange = TRUE) +
geom_smooth(aes(target.frames, indi_fit, group = pas), method = "glm", method.args = list(family = "binomial"), se = FALSE, fullrange = TRUE) +
xlim(0,8) +
ylab("Fitted Values") +
xlab("Number of Target Frames") +
ggtitle("Plotting of Subject 7")
fitfit_func <- function(x, par){
par[1] + (par[2] - par[1])/(1 + exp((par[3] - x)/par[4]))
}
sub_7$alternative_fit <-  fitfit_func(sub_7$target.frames[i], optim_par_total$par)
