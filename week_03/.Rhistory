filter(subject == random_subject[i]) %>%
ggplot(aes(pas, fitted, fill = pas)) +
geom_bar(stat = "identity") +
ggtitle(paste(c('Estimated amount of ratings for Subject', random_subject[i]), collapse=', ' )) + ylim(0,300) +
ylab("Estimated count") +
xlab("Perceptual Awareness Scale Rating")
plot_final[[i]] <- plot_temp
}
plot_final
data_exp_2_exp <- data_exp_2 %>%
filter(trial.type == "experiment")
mod_3_par_4 <- glmer(correct ~ task + (1|subject), data = data_exp_2_exp, family = "binomial")
mod_3_par_4
logit <-     function(x) log(x / (1 - x))
inv.logit <- function(x) exp(x) / (1 + exp(x))
inv.logit(1.11896)
inv.logit(1.11896 - 0.07496)
inv.logit(1.11896 + 0.16603)
mod_3_par_5 <- glmer(correct ~ task + pas + (1|subject), data = data_exp_2_exp, family = "binomial")
mod_3_par_5
mod_3_par_8 <- glmer(correct ~ pas + (1|subject), data = data_exp_2_exp, family = "binomial")
mod_3_par_8
mod_3_par_6 <- glmer(correct ~ pas + (1|subject), data = data_exp_2_exp, family = "binomial")
mod_3_par_6
mod_3_par_7 <- glmer(correct ~ pas*task + (1|subject), data = data_exp_2_exp, family = "binomial")
mod_3_par_7
anova(mod_3_par_4, mod_3_par_5, mod_3_par_6, mod_3_par_7)
knitr::opts_chunk$set(echo = TRUE)
pacman::p_load(tidyverse, lme4, readbulk, grid, gridExtra, MuMIn, dfoptim)
#third solution, making a function and a plot for each participant trough a for-loop. However, this is a messy solution
mod_mod = list()
plot_plot = list()
for (i in 1:length(unique(data_exp_2$subject))){
data_exp_2_stair <- data_exp_2 %>%
filter(trial.type == "staircase") %>%
filter(subject == i)
mod_1_no_pool <- glm(correct ~ target.contrast, data = data_exp_2_stair, family = 'binomial')
mod_mod[[i]] <- mod_1_no_pool
data_exp_2_stair$fitted <- fitted.values(mod_1_no_pool)
plotty <- data_exp_2_stair %>%
ggplot(aes(target.contrast, fitted)) +
geom_point() +
ylim(0,1) +
ggtitle(paste(c('Fitted values for Subject', data_exp_2$subject[i]), collapse=', ' ))
plot_plot[[i]] <- plotty
}
knitr::opts_chunk$set(echo = TRUE)
pacman::p_load(tidyverse, lme4, readbulk, grid, gridExtra, MuMIn, dfoptim)
data_exp_2 <- read_bulk("experiment_2", extension = ".csv")
head(data_exp_2)
data_exp_2$correct <- ifelse(grepl("odd", data_exp_2$target.type) & grepl("o", data_exp_2$obj.resp), 1, ifelse(grepl("even", data_exp_2$target.type) & grepl("e", data_exp_2$obj.resp), 1, 0))
#making it a factorial variable instead of numeric
data_exp_2$correct <- as.factor(data_exp_2$correct)
summary(data_exp_2)
data_exp_2$pas <- as.factor(data_exp_2$pas)
data_exp_2$subject <- as.factor(data_exp_2$subject)
#I was unsure, what you wanted us to do. So I have created 3 different solutions that I assessed to be equally probable of being the solution
#first solution, which is a partial pooling model plotted for each participant (I see this as the best solution)
data_exp_2_stair <- data_exp_2 %>%
filter(trial.type == "staircase")
mod_1_no <- glm(correct ~ target.contrast + subject + target.contrast:subject, data = data_exp_2_stair, family = 'binomial')
data_exp_2_stair$fitted <- fitted.values(mod_1_no)
data_exp_2_stair %>%
ggplot(aes(target.contrast, fitted)) +
geom_point() +
facet_wrap(~subject)
#second solution is just complete pooling and then plotting for each individual
mod_1_com <- glm(correct ~ target.contrast, data = data_exp_2_stair, family = 'binomial')
data_exp_2_stair$fitted <- fitted.values(mod_1_com)
data_exp_2_stair %>%
ggplot(aes(target.contrast, fitted)) +
geom_point() +
facet_wrap(~subject)
#third solution, making a function and a plot for each participant trough a for-loop. However, this is a messy solution
mod_mod = list()
plot_plot = list()
for (i in 1:length(unique(data_exp_2$subject))){
data_exp_2_stair <- data_exp_2 %>%
filter(trial.type == "staircase") %>%
filter(subject == i)
mod_1_no_pool <- glm(correct ~ target.contrast, data = data_exp_2_stair, family = 'binomial')
mod_mod[[i]] <- mod_1_no_pool
data_exp_2_stair$fitted <- fitted.values(mod_1_no_pool)
plotty <- data_exp_2_stair %>%
ggplot(aes(target.contrast, fitted)) +
geom_point() +
ylim(0,1) +
ggtitle(paste(c('Fitted values for Subject', data_exp_2$subject[i]), collapse=', ' ))
plot_plot[[i]] <- plotty
}
plot_plot
data_exp_2$subject[3]
data_exp_2$subject[5]
unique(data_exp_2$subject)[5]
#third solution, making a function and a plot for each participant trough a for-loop. However, this is a messy solution
mod_mod = list()
plot_plot = list()
for (i in 1:length(unique(data_exp_2$subject))){
data_exp_2_stair <- data_exp_2 %>%
filter(trial.type == "staircase") %>%
filter(subject == i)
mod_1_no_pool <- glm(correct ~ target.contrast, data = data_exp_2_stair, family = 'binomial')
mod_mod[[i]] <- mod_1_no_pool
data_exp_2_stair$fitted <- fitted.values(mod_1_no_pool)
plotty <- data_exp_2_stair %>%
ggplot(aes(target.contrast, fitted)) +
geom_point() +
ylim(0,1) +
ggtitle(paste(c('Fitted values for Subject', unique(data_exp_2$subject)[i]), collapse=', ' ))
plot_plot[[i]] <- plotty
}
plot_plot
source("~/.active-rstudio-document", echo=TRUE)
knitr::opts_chunk$set(echo = TRUE)
pacman::p_load(tidyverse, lme4, readbulk, grid, gridExtra, MuMIn, dfoptim)
data_exp_2 <- read_bulk("experiment_2", extension = ".csv")
head(data_exp_2)
data_exp_2$correct <- ifelse(grepl("odd", data_exp_2$target.type) & grepl("o", data_exp_2$obj.resp), 1, ifelse(grepl("even", data_exp_2$target.type) & grepl("e", data_exp_2$obj.resp), 1, 0))
#making it a factorial variable instead of numeric
data_exp_2$correct <- as.factor(data_exp_2$correct)
summary(data_exp_2)
data_exp_2$pas <- as.factor(data_exp_2$pas)
data_exp_2$subject <- as.factor(data_exp_2$subject)
#I was unsure, what you wanted us to do. So I have created 3 different solutions that I assessed to be equally probable of being the solution
#first solution, which is a partial pooling model plotted for each participant (I see this as the best solution)
data_exp_2_stair <- data_exp_2 %>%
filter(trial.type == "staircase")
mod_1_no <- glm(correct ~ target.contrast + subject + target.contrast:subject, data = data_exp_2_stair, family = 'binomial')
#fitted() can also just be used
data_exp_2_stair$fitted <- fitted.values(mod_1_no)
#data_exp_2_stair$fitted <- fitted(mod_1_no)
data_exp_2_stair %>%
ggplot(aes(target.contrast, fitted)) +
geom_point() +
facet_wrap(~subject)
#I was unsure, what you wanted us to do. So I have created 3 different solutions that I assessed to be equally probable of being the solution
#first solution, which is a partial pooling model plotted for each participant (I see this as the best solution)
data_exp_2_stair <- data_exp_2 %>%
filter(trial.type == "staircase")
mod_1_no <- glm(correct ~ target.contrast + subject + target.contrast:subject, data = data_exp_2_stair, family = 'binomial')
#fitted() can also just be used
#data_exp_2_stair$fitted <- fitted.values(mod_1_no)
data_exp_2_stair$fitted <- fitted(mod_1_no)
data_exp_2_stair %>%
ggplot(aes(target.contrast, fitted)) +
geom_point() +
facet_wrap(~subject)
#I choose to continue with solution 1, since it is easier to manipulate
data_exp_2_stair <- data_exp_2 %>%
filter(trial.type == "staircase")
mod_1_no <- glm(correct ~ target.contrast + subject + target.contrast:subject, data = data_exp_2_stair, family = 'binomial')
mod_1_par <- glmer(correct ~ target.contrast + (target.contrast|subject), data = data_exp_2_stair, family = 'binomial')
data_exp_2_stair$fitted_no_pooling <- fitted.values(mod_1_no)
data_exp_2_stair$fitted_par_pooling <- fitted.values(mod_1_par)
data_exp_2_stair <- data_exp_2_stair %>%
pivot_longer(c(fitted_no_pooling, fitted_par_pooling))
data_exp_2_stair %>%
ggplot(aes()) +
geom_point(aes(target.contrast, value, colour = name)) +
facet_wrap(~subject) +
ylab("Fitted Values") +
xlab("Contrast of Target Stimulus") +
ggtitle("Plotting of No Pooling and Partial Pooling models")
knitr::opts_chunk$set(echo = TRUE)
pacman::p_load(tidyverse, lme4, readbulk, grid, gridExtra, MuMIn, dfoptim)
data_exp_2 <- read_bulk("experiment_2", extension = ".csv")
head(data_exp_2)
data_exp_2$correct <- ifelse(grepl("odd", data_exp_2$target.type) & grepl("o", data_exp_2$obj.resp), 1, ifelse(grepl("even", data_exp_2$target.type) & grepl("e", data_exp_2$obj.resp), 1, 0))
#making it a factorial variable instead of numeric
data_exp_2$correct <- as.factor(data_exp_2$correct)
#or glimpse(df)
summary(data_exp_2)
data_exp_2$pas <- as.factor(data_exp_2$pas)
data_exp_2$subject <- as.factor(data_exp_2$subject)
#I was unsure, what you wanted us to do. So I have created 3 different solutions that I assessed to be equally probable of being the solution
#first solution, which is a partial pooling model plotted for each participant (I see this as the best solution)
data_exp_2_stair <- data_exp_2 %>%
filter(trial.type == "staircase")
mod_1_no <- glm(correct ~ target.contrast + subject + target.contrast:subject, data = data_exp_2_stair, family = 'binomial')
#fitted() can also just be used
#data_exp_2_stair$fitted <- fitted.values(mod_1_no)
data_exp_2_stair$fitted <- fitted(mod_1_no)
data_exp_2_stair %>%
ggplot(aes(target.contrast, fitted)) +
geom_point() +
facet_wrap(~subject)
#second solution is just complete pooling and then plotting for each individual
mod_1_com <- glm(correct ~ target.contrast, data = data_exp_2_stair, family = 'binomial')
data_exp_2_stair$fitted <- fitted.values(mod_1_com)
data_exp_2_stair %>%
ggplot(aes(target.contrast, fitted)) +
geom_point() +
facet_wrap(~subject)
#third solution, making a function and a plot for each participant trough a for-loop. However, this is a messy solution
mod_mod = list()
plot_plot = list()
for (i in 1:length(unique(data_exp_2$subject))){
data_exp_2_stair <- data_exp_2 %>%
filter(trial.type == "staircase") %>%
filter(subject == i)
mod_1_no_pool <- glm(correct ~ target.contrast, data = data_exp_2_stair, family = 'binomial')
mod_mod[[i]] <- mod_1_no_pool
data_exp_2_stair$fitted <- fitted.values(mod_1_no_pool)
plotty <- data_exp_2_stair %>%
ggplot(aes(target.contrast, fitted)) +
geom_point() +
ylim(0,1) +
ggtitle(paste(c('Fitted values for Subject', unique(data_exp_2$subject)[i]), collapse=', ' ))
plot_plot[[i]] <- plotty
}
plot_plot
#I choose to continue with solution 1, since it is easier to manipulate
data_exp_2_stair <- data_exp_2 %>%
filter(trial.type == "staircase")
mod_1_no <- glm(correct ~ target.contrast + subject + target.contrast:subject, data = data_exp_2_stair, family = 'binomial')
mod_1_par <- glmer(correct ~ target.contrast + (target.contrast|subject), data = data_exp_2_stair, family = 'binomial')
data_exp_2_stair$fitted_no_pooling <- fitted.values(mod_1_no)
data_exp_2_stair$fitted_par_pooling <- fitted.values(mod_1_par)
data_exp_2_stair <- data_exp_2_stair %>%
pivot_longer(c(fitted_no_pooling, fitted_par_pooling))
data_exp_2_stair %>%
ggplot(aes()) +
geom_point(aes(target.contrast, value, colour = name)) +
facet_wrap(~subject) +
ylab("Fitted Values") +
xlab("Contrast of Target Stimulus") +
ggtitle("Plotting of No Pooling and Partial Pooling models")
data_exp_2_exp <- data_exp_2 %>%
filter(trial.type == "experiment")
#I pick four subjects by random
set.seed(1234)
random_subject <- sample(1:29, 4)
models <- list()
for (i in 1:length(random_subject)){
data_exp_2_exp_sub <- data_exp_2 %>%
filter(trial.type == "experiment") %>%
filter(subject == i)
mod_2_int <- lm(rt.obj~1, data = data_exp_2_exp_sub)
models[[i]] <- mod_2_int
title = paste(c('Normal QQ-plot of Subject', random_subject[i]), collapse=', ' )
qqnorm(resid(mod_2_int), main = title);qqline(resid(mod_2_int), col = 'green')
}
models <- list()
for (i in 1:length(random_subject)){
data_exp_2_exp_sub <- data_exp_2 %>%
filter(trial.type == "experiment") %>%
filter(subject == i)
mod_2_int <- lm(log(rt.obj)~1, data = data_exp_2_exp_sub)
models[[i]] <- mod_2_int
title = paste(c('Normal QQ-plot of Subject', random_subject[i]), collapse=', ' )
qqnorm(resid(mod_2_int), main = title);qqline(resid(mod_2_int), col = 'green')
}
data_exp_2_exp <- data_exp_2 %>%
filter(trial.type == "experiment")
mod_2_par_1 <- lmer(rt.obj ~ task + (1|subject), data = data_exp_2_exp, REML = F)
mod_2_par_2 <- lmer(rt.obj ~ task + (task|subject), data = data_exp_2_exp, REML = F)
mod_2_par_3 <- lmer(rt.obj ~ task + (1|subject) + (1|pas), data = data_exp_2_exp, REML = F)
mod_2_par_4 <- lmer(rt.obj ~ task + (task|subject) + (1|pas), data = data_exp_2_exp, REML = F)
mod_2_par_5 <- lmer(rt.obj ~ task + (1|subject) + (1|pas) + (1|trial), data = data_exp_2_exp, REML = F)
anova(mod_2_par_1, mod_2_par_2, mod_2_par_3, mod_2_par_4, mod_2_par_5)
r.squaredGLMM(mod_2_par_1)
r.squaredGLMM(mod_2_par_2)
r.squaredGLMM(mod_2_par_3)
r.squaredGLMM(mod_2_par_4)
r.squaredGLMM(mod_2_par_5)
summary(mod_2_par_3)
mod_2_par_6 <- lmer(rt.obj ~ task*pas + (1|subject), data = data_exp_2_exp, REML = F)
mod_2_par_7 <- lmer(rt.obj ~ task*pas + (1|subject) + (1|trial) + (1|target.type), data = data_exp_2_exp, REML = F)
mod_2_par_8 <- lmer(rt.obj ~ task*pas + (1|subject) + (1|trial) + (1|target.type) + (1|obj.resp), data = data_exp_2_exp, REML = F)
print(VarCorr(mod_2_par_8), comp = 'Variance')
## you can start from this if you want to, but you can also make your own from scratch
#data.count <- data.frame(count = numeric(),
#                         pas = numeric(), ## remember to make this into a factor afterwards
#                         task = numeric(), ## and this too
#                         subject = numeric()) ## and this too
data.count <- data_exp_2_exp %>%
group_by(subject, task, pas) %>%
summarise(count = n())
mod_3_par_1 <- glmer(count ~ task*pas + (pas|subject), data = data.count, family = "poisson")
mod_3_par_1
mod_3_par_2 <- glmer(count ~ task*pas + (pas|subject), data = data.count, family = "poisson", control = glmerControl(optimize = "bobyqa"))
mod_3_par_2
mod_3_par_3 <- glmer(count ~ task + pas + (pas|subject), data = data.count, family = "poisson", control = glmerControl(optimize = "bobyqa"))
mod_3_par_2;mod_3_par_3
anova(mod_3_par_2, mod_3_par_3)
mod_3_par_2
random_subject <- sample(1:29, 4)
plot_final <- list()
for (i in 1:length(random_subject)){
data.count$fitted <- fitted.values(mod_3_par_2)
plot_temp <- data.count %>%
filter(subject == random_subject[i]) %>%
ggplot(aes(pas, fitted, fill = pas)) +
geom_bar(stat = "identity") +
ggtitle(paste(c('Estimated amount of ratings for Subject', random_subject[i]), collapse=', ' )) + ylim(0,300) +
ylab("Estimated count") +
xlab("Perceptual Awareness Scale Rating")
plot_final[[i]] <- plot_temp
}
plot_final
data_exp_2_exp <- data_exp_2 %>%
filter(trial.type == "experiment")
mod_3_par_4 <- glmer(correct ~ task + (1|subject), data = data_exp_2_exp, family = "binomial")
mod_3_par_4
logit <-     function(x) log(x / (1 - x))
inv.logit <- function(x) exp(x) / (1 + exp(x))
inv.logit(1.11896)
inv.logit(1.11896 - 0.07496)
inv.logit(1.11896 + 0.16603)
r.squaredGLMM(mod_3_par_4)
mod_3_par_5 <- glmer(correct ~ task + pas + (1|subject), data = data_exp_2_exp, family = "binomial")
mod_3_par_5
inv.logit(0.14963)
inv.logit(0.14963 + 2.88685)
mod_3_par_6 <- glmer(correct ~ pas + (1|subject), data = data_exp_2_exp, family = "binomial")
mod_3_par_6
mod_3_par_7 <- glmer(correct ~ pas*task + (1|subject), data = data_exp_2_exp, family = "binomial")
mod_3_par_7
anova(mod_3_par_4, mod_3_par_5, mod_3_par_6, mod_3_par_7)
r.squaredGLMM(mod_3_par_5)
knitr::opts_chunk$set(echo = TRUE)
pacman::p_load(tidyverse, lmerTest)
politeness <- read.csv('politeness.csv') ## read in data
#investigating the data
ls.str(politeness)
#making gender, attitude and scenaruo into facter and adding them to the dataframe:
attitude.f = as.factor(politeness$attitude)
gender.f = as.factor(politeness$gender)
scenario.f = as.factor(politeness$scenario)
politeness <- politeness %>%
mutate(attitude.f, gender.f, scenario.f)
#making a dataframe only for the first subject (F1)
F1_df <- politeness %>%
filter(subject == 'F1')
## Running the two linear models
#model 1 with scenario as integer:
F1_model1 <- lm(f0mn ~ scenario, data = F1_df)
#model 2 with scenario as factor
F1_model2 <- lm(f0mn ~ scenario.f, data = F1_df)
summary(F1_model1)
summary(F1_model2)
#making a model matrix for each model:
X1 <- model.matrix(F1_model1) #integer model
X2 <- model.matrix(F1_model2) #factor model
politeness %>%
ggplot(aes(scenario.f, f0mn, color = attitude.f)) + geom_point() +
facet_wrap(~subject) +
theme_bw() +
xlab("Scenarios") +
ylab("Frequency") +
ggtitle("Subplot for Each Subject")
#i
model1 <- lm(f0mn ~ gender.f, data = politeness)
#ii
model2 <- lmer(f0mn ~ gender.f + (1 | scenario.f), data = politeness, REML = FALSE)
#iii
model3 <- lmer(f0mn ~ gender.f + (1 | subject), data = politeness, REML = FALSE)
#iv
model4 <- lmer(f0mn ~ gender.f + (1 | scenario.f) + (1|subject), data = politeness, REML = FALSE)
AIC(model1, model2, model3, model4)
#v
sigma(model1)
sigma(model2)
sigma(model3)
sigma(model4)
#vi the most variance explained by the effects (scenario or subject):
pacman::p_load(MuMIn)
r.squaredGLMM(model2)
r.squaredGLMM(model3)
r.squaredGLMM(model4)
#making a new dataframe with the selected variables:
politeness_sel <- politeness %>%
filter(!is.na(f0mn)) %>% #making sure there is no NA in the new df
select(f0mn,attitude,subject) %>%
group_by(subject) %>%
summarise(f0mn_mean = mean(f0mn))
politeness_sel <- politeness_sel %>% #adding the gender to the dataframe
mutate(gender = if_else(grepl("F", politeness_sel$subject, ignore.case = T),"F","M")) %>%
mutate(gender = as.factor(gender))
#builing single-level model
ms <- lm(f0mn_mean ~ gender, data = politeness_sel)
#the new single model
qqnorm(resid(ms))
qqline(resid(ms), col = 'lightblue')
#The old single model
qqnorm(resid(model1))
qqline(resid(model1), col = 'green')
#The multilevel model (model 4)
qqnorm(resid(model4))
qqline(resid(model4), col = 'pink')
fitted <- fitted(model4) #making the fitted values
politeness_una <- politeness %>%
filter(!is.na(f0mn)) %>%  #making sure we have no NA's
mutate(fitted) #adding the fitted values to the dataset
politeness_una %>%
ggplot(aes(scenario.f, f0mn, color = attitude.f))+
geom_point()+
geom_point(aes(y = fitted), colour = 'black', size = 0.5)+
facet_wrap(~subject) +
theme_minimal()+
xlab("Scenario")+
ylab('Frequency') +
ggtitle("Subplot for Each Subject")
# the model to carry on with: model4 <- lmer(f0mn ~ gender.f + (1 | scenario.f) + (1|subject), data = politeness)
#the new model with both gender and attitude:
model5 <- lmer(f0mn ~ gender.f + attitude.f + (1|scenario.f)+(1|subject), data = politeness, REML = FALSE)
model6 <- lmer(f0mn ~ gender.f*attitude.f + (1|scenario.f)+(1|subject), data = politeness, REML = FALSE)
summary(model6)
#model4: gender as main effect
summary(model4)
#model5: gender and attitudes as main effects
summary(model5)
#model6: gender and attitude as main effects and with an interaction between them
summary(model6)
#comparison by AIC:
AIC(model4, model5, model6)
#comparing by standard deviation of residuals
sigma(model4)
sigma(model5)
sigma(model6)
#comparing by the residual variance:
sum(residuals(model4)^2)
sum(residuals(model5)^2)
sum(residuals(model6)^2)
qqnorm(resid(model5))
qqline(resid(model5), col = 'aquamarine')
#investigating the data
ls.str(politeness)
glimpse(politeness)
#investigating the data
#ls.str(politeness)
glimpse(politeness)
View(politeness)
#The multilevel model (model 4)
qqnorm(resid(model4))
qqline(resid(model4), col = 'aquamarine')
#The multilevel model (model 4)
qqnorm(resid(model4))
qqline(resid(model4), col = 'pink')
fitted <- fitted(model4) #making the fitted values
politeness_una <- politeness %>%
filter(!is.na(f0mn)) %>%  #making sure we have no NA's
mutate(fitted) #adding the fitted values to the dataset
politeness_una %>%
ggplot(aes(scenario.f, f0mn, color = attitude.f))+
geom_point()+
geom_point(aes(y = fitted), colour = 'black')+
facet_wrap(~subject) +
theme_minimal()+
xlab("Scenario")+
ylab('Frequency') +
ggtitle("Subplot for Each Subject")
fitted <- fitted(model4) #making the fitted values
politeness_una <- politeness %>%
filter(!is.na(f0mn)) %>%  #making sure we have no NA's
mutate(fitted) #adding the fitted values to the dataset
politeness_una %>%
ggplot(aes(scenario.f, f0mn, color = attitude.f))+
geom_point(size = 0.5)+
geom_point(aes(y = fitted), colour = 'black', size = 0.5)+
facet_wrap(~subject) +
theme_minimal()+
xlab("Scenario")+
ylab('Frequency') +
ggtitle("Subplot for Each Subject")
fitted <- fitted(model4) #making the fitted values
politeness_una <- politeness %>%
filter(!is.na(f0mn)) %>%  #making sure we have no NA's
mutate(fitted) #adding the fitted values to the dataset
politeness_una %>%
ggplot(aes(scenario.f, f0mn, color = attitude.f))+
geom_point(size = 0.5)+
geom_point(aes(y = fitted), colour = 'black', size = 0.5)+
facet_wrap(~subject) +
theme_minimal()+
xlab("Scenario")+
ylab('Frequency') +
ggtitle("Subplot for Each Subject")
fitted <- predict(model4) #making the fitted values
politeness_una <- politeness %>%
filter(!is.na(f0mn)) %>%  #making sure we have no NA's
mutate(fitted) #adding the fitted values to the dataset
politeness_una %>%
ggplot(aes(scenario.f, f0mn, color = attitude.f))+
geom_point(size = 0.5)+
geom_point(aes(y = fitted), colour = 'black', size = 0.5)+
facet_wrap(~subject) +
theme_minimal()+
xlab("Scenario")+
ylab('Frequency') +
ggtitle("Subplot for Each Subject")
fitted <- fitted(model4) #making the fitted values
politeness_una <- politeness %>%
filter(!is.na(f0mn)) %>%  #making sure we have no NA's
mutate(fitted) #adding the fitted values to the dataset
politeness_una %>%
ggplot(aes(scenario.f, f0mn, color = attitude.f))+
geom_point(size = 0.5)+
geom_point(aes(y = fitted), colour = 'black', size = 0.5)+
facet_wrap(~subject) +
theme_minimal()+
xlab("Scenario")+
ylab('Frequency') +
ggtitle("Subplot for Each Subject")
qqnorm(resid(model5))
qqline(resid(model5), col = 'aquamarine1')
qqnorm(resid(model5))
qqline(resid(model5), col = 'aquamarine3')
qqnorm(resid(model5))
qqline(resid(model5), col = 'aquamarine4')
qqnorm(resid(model5))
qqline(resid(model5), col = 'aquamarine')
