summarise(count n())
data_exp_2_exp %>%
group_by(subject, task, pas) %>%
summarise(count = n())
data.count <- data_exp_2_exp %>%
group_by(subject, task, pas) %>%
summarise(count = n())
View(data.count)
class(data.count$subject)
class(data.count$pas)
class(data.count$subject)
class(data.count$task)
## you can start from this if you want to, but you can also make your own from scratch
#data.count <- data.frame(count = numeric(),
#                         pas = numeric(), ## remember to make this into a factor afterwards
#                         task = numeric(), ## and this too
#                         subject = numeric()) ## and this too
data.count <- data_exp_2_exp %>%
group_by(subject, task, pas) %>%
summarise(count = n())
mod_3_par_1 <- lmer(count ~ task*pas + (pas|subject), data = data.count, REML = F)
mod_3_par_1 <- glmer(count ~ task*pas + (pas|subject), data = data.count, REML = F)
mod_3_par_1 <- lmer(count ~ task*pas + (pas|subject), data = data.count, REML = F)
mod_3_par_1 <- glmer(count ~ task*pas + (pas|subject), data = data.count, family = "gaussian")
mod_3_par_1 <- lmer(count ~ task*pas + (pas|subject), data = data.count)
mod_3_par_1 <- lmer(count ~ task*pas + (pas|subject), data = data.count, REML = F)
hist(data.count$count)
mod_3_par_1
pacman::p_load(tidyverse, lme4, readbulk, grid, gridExtra, MuMIn, dfoptim)
mod_3_par_1 <- lmer(count ~ task*pas + (pas|subject), data = data.count, REML = F)
mod_3_par_2 <- glmer(count ~ task*pas + (pas|subject), data = data.count, family = "poisson")
summary(mod_3_par_1)
summary(mod_3_par_2)
#summary(mod_3_par_2)
summary(mod_3_par_1)
mod_3_par_1
mod_3_par_1
mod_3_par_2
mod_3_par_3 <- glmer(count ~ task*pas + (pas|subject), data = data.count, family = "gaussian", control = glmerControl(optimize = "bobyqa"))
#mod_3_par_3 <- glmer(count ~ task*pas + (pas|subject), data = data.count, family = "gaussian", control = glmerControl(optimize = "bobyqa"))
mod_3_par_4 <- glmer(count ~ task*pas + (pas|subject), data = data.count, family = "poisson", control = glmerControl(optimize = "bobyqa"))
mod_3_par_4
mod_3_par_5 <- glmer(count ~ task + pas + (pas|subject), data = data.count, family = "poisson", control = glmerControl(optimize = "bobyqa"))
mod_3_par_4;mod_3_par_5
coef(mod_3_par_4)
mod_3_par_4[1]
mod_3_par_4[[1]]
anova(mod_3_par_4, mod_3_par_5)
mod_3_par_5
mod_3_par_4
random_subject <- sample(1:29, 4)
plot_final <- list()
for (i in 1:length(random_subject)){
data.count$fitted <- fitted.values(mod_3_par_4)
plot_temp <- data.count %>%
filter(subject = random_subject[i]) %>%
ggplot() +
geom_histogram(aes(count))
plot_final[[i]] <- plot_temp
}
random_subject <- sample(1:29, 4)
plot_final <- list()
for (i in 1:length(random_subject)){
data.count$fitted <- fitted.values(mod_3_par_4)
plot_temp <- data.count %>%
filter(subject == random_subject[i]) %>%
ggplot() +
geom_histogram(aes(count))
plot_final[[i]] <- plot_temp
}
plot_final
random_subject <- sample(1:29, 4)
plot_final <- list()
for (i in 1:length(random_subject)){
data.count$fitted <- fitted.values(mod_3_par_4)
plot_temp <- data.count %>%
filter(subject == random_subject[i]) %>%
ggplot() +
geom_histogram(aes(fitted))
plot_final[[i]] <- plot_temp
}
plot_final
random_subject <- sample(1:29, 4)
plot_final <- list()
for (i in 1:length(random_subject)){
data.count$fitted <- fitted.values(mod_3_par_4)
plot_temp <- data.count %>%
filter(subject == random_subject[i]) %>%
ggplot() +
geom_bare(aes(pas, fitted))
plot_final[[i]] <- plot_temp
}
random_subject <- sample(1:29, 4)
plot_final <- list()
for (i in 1:length(random_subject)){
data.count$fitted <- fitted.values(mod_3_par_4)
plot_temp <- data.count %>%
filter(subject == random_subject[i]) %>%
ggplot() +
geom_bar(aes(pas, fitted))
plot_final[[i]] <- plot_temp
}
plot_final
random_subject <- sample(1:29, 4)
plot_final <- list()
for (i in 1:length(random_subject)){
data.count$fitted <- fitted.values(mod_3_par_4)
plot_temp <- data.count %>%
filter(subject == random_subject[i]) %>%
ggplot(aes(pas, fitted)) +
geom_bar()
plot_final[[i]] <- plot_temp
}
plot_final
random_subject <- sample(1:29, 4)
plot_final <- list()
for (i in 1:length(random_subject)){
data.count$fitted <- fitted.values(mod_3_par_4)
plot_temp <- data.count %>%
filter(subject == random_subject[i]) %>%
ggplot(aes(pas, fitted)) +
geom_bar(stat = "identity")
plot_final[[i]] <- plot_temp
}
plot_final
random_subject <- sample(1:29, 4)
plot_final <- list()
for (i in 1:length(random_subject)){
data.count$fitted <- fitted.values(mod_3_par_4)
plot_temp <- data.count %>%
filter(subject == random_subject[i]) %>%
ggplot(aes(pas, fitted)) +
geom_bar(stat = "identity") +
ggtitle(paste(c('Estimated amount of ratings for Subject', random_subject[i]), collapse=', ' )) + ylim(0,300)
plot_final[[i]] <- plot_temp
}
plot_final
random_subject <- sample(1:29, 4)
plot_final <- list()
for (i in 1:length(random_subject)){
data.count$fitted <- fitted.values(mod_3_par_4)
plot_temp <- data.count %>%
filter(subject == random_subject[i]) %>%
ggplot(aes(pas, fitted, colour = pas)) +
geom_bar(stat = "identity") +
ggtitle(paste(c('Estimated amount of ratings for Subject', random_subject[i]), collapse=', ' )) + ylim(0,300)
plot_final[[i]] <- plot_temp
}
plot_final
random_subject <- sample(1:29, 4)
plot_final <- list()
for (i in 1:length(random_subject)){
data.count$fitted <- fitted.values(mod_3_par_4)
plot_temp <- data.count %>%
filter(subject == random_subject[i]) %>%
ggplot(aes(pas, fitted, fill = pas)) +
geom_bar(stat = "identity") +
ggtitle(paste(c('Estimated amount of ratings for Subject', random_subject[i]), collapse=', ' )) + ylim(0,300)
plot_final[[i]] <- plot_temp
}
plot_final
random_subject <- sample(1:29, 4)
plot_final <- list()
for (i in 1:length(random_subject)){
data.count$fitted <- fitted.values(mod_3_par_4)
plot_temp <- data.count %>%
filter(subject == random_subject[i]) %>%
ggplot(aes(pas, fitted, fill = pas)) +
geom_bar(stat = "identity") +
ggtitle(paste(c('Estimated amount of ratings for Subject', random_subject[i]), collapse=', ' )) + ylim(0,300) +
ylab("Estimated count") +
xlab("Perceptual Awareness Scale")
plot_final[[i]] <- plot_temp
}
plot_final
random_subject <- sample(1:29, 4)
plot_final <- list()
for (i in 1:length(random_subject)){
data.count$fitted <- fitted.values(mod_3_par_4)
plot_temp <- data.count %>%
filter(subject == random_subject[i]) %>%
ggplot(aes(pas, fitted, fill = pas)) +
geom_bar(stat = "identity") +
ggtitle(paste(c('Estimated amount of ratings for Subject', random_subject[i]), collapse=', ' )) + ylim(0,300) +
ylab("Estimated count") +
xlab("Perceptual Awareness Scale Rating")
plot_final[[i]] <- plot_temp
}
plot_final
data_exp_2_exp <- data_exp_2 %>%
filter(trial.type == "experiment")
mod_3_par_6 <- lmer(correct~task + (1|subject), data = data_exp_2_exp, REMl = F)
data_exp_2_exp <- data_exp_2 %>%
filter(trial.type == "experiment")
mod_3_par_6 <- lmer(correct ~ task + (1|subject), data = data_exp_2_exp, REML = F)
data_exp_2_exp <- data_exp_2 %>%
filter(trial.type == "experiment")
mod_3_par_6 <- glmer(correct ~ task + (1|subject), data = data_exp_2_exp, family = "binomial")
mod_3_par_6
logit <-     function(x) log(x / (1 - x))
inv.logit <- function(x) exp(x) / (1 + exp(x))
logit(1.11896)
logit <-     function(x) log(x / (1 - x))
inv.logit <- function(x) exp(x) / (1 + exp(x))
inv.logit(1.11896)
logit <-     function(x) log(x / (1 - x))
inv.logit <- function(x) exp(x) / (1 + exp(x))
inv.logit(1.11896 + 0.16603)
logit <-     function(x) log(x / (1 - x))
inv.logit <- function(x) exp(x) / (1 + exp(x))
inv.logit(1.11896 - 0.07496)
logit <-     function(x) log(x / (1 - x))
inv.logit <- function(x) exp(x) / (1 + exp(x))
inv.logit(1.11896)
inv.logit(1.11896 - 0.07496)
inv.logit(1.11896 + 0.22603)
logit <-     function(x) log(x / (1 - x))
inv.logit <- function(x) exp(x) / (1 + exp(x))
inv.logit(1.11896)
inv.logit(1.11896 - 0.07496)
inv.logit(1.11896 + 0.16603)
data_exp_2_exp <- data_exp_2 %>%
filter(trial.type == "experiment")
mod_3_par_6_1 <- glmer(correct ~ (1|subject), data = data_exp_2_exp, family = "binomial")
mod_3_par_6 <- glmer(correct ~ task + (1|subject), data = data_exp_2_exp, family = "binomial")
mod_3_par_6_1
data_exp_2_exp <- data_exp_2 %>%
filter(trial.type == "experiment")
mod_3_par_6_1 <- glmer(correct ~ 1, data = data_exp_2_exp, family = "binomial")
data_exp_2_exp <- data_exp_2 %>%
filter(trial.type == "experiment")
mod_3_par_6_1 <- glm(correct ~ 1, data = data_exp_2_exp, family = "binomial")
mod_3_par_6 <- glmer(correct ~ task + (1|subject), data = data_exp_2_exp, family = "binomial")
mod_3_par_6_1
data_exp_2_exp <- data_exp_2 %>%
filter(trial.type == "experiment")
mod_3_par_6 <- glmer(correct ~ task + (1|subject), data = data_exp_2_exp, family = "binomial")
mod_3_par_6
mod_3_par_7 <- glmer(correct ~ task + pas + (1|subject), data = data_exp_2_exp, family = "binomial")
mod_3_par_7
inv.logit(0.14963)
inv.logit(0.14963 + 2.88685)
mod_3_par_8 <- glmer(correct ~ pas + (1|subject), data = data_exp_2_exp, family = "binomial")
mod_3_par_8
mod_3_par_9 <- glmer(correct ~ pas*task + (1|subject), data = data_exp_2_exp, family = "binomial")
mod_3_par_9
pacman::p_load(tidyverse, lme4, readbulk, grid, gridExtra, MuMIn, dfoptim)
data_exp_2 <- read_bulk("experiment_2", extension = ".csv")
head(data_exp_2)
data_exp_2$correct <- ifelse(grepl("odd", data_exp_2$target.type) & grepl("o", data_exp_2$obj.resp), 1, ifelse(grepl("even", data_exp_2$target.type) & grepl("e", data_exp_2$obj.resp), 1, 0))
#making it a factorial variable instead of numeric
data_exp_2$correct <- as.factor(data_try$correct)
data_exp_2 <- read_bulk("experiment_2", extension = ".csv")
data_exp_2$correct <- ifelse(grepl("odd", data_exp_2$target.type) & grepl("o", data_exp_2$obj.resp), 1, ifelse(grepl("even", data_exp_2$target.type) & grepl("e", data_exp_2$obj.resp), 1, 0))
#making it a factorial variable instead of numeric
data_exp_2$correct <- as.factor(data_exp_2$correct)
data_exp_2$pas <- as.factor(data_exp_2$pas)
data_exp_2$subject <- as.factor(data_exp_2$subject)
summary(data_exp_2)
data_exp_2$pas <- as.factor(data_exp_2$pas)
data_exp_2$subject <- as.factor(data_exp_2$subject)
#I was unsure, what you wanted us to do. So I have created 3 different solutions that I assessed to be equally probable of being the solution
#first solution, which is a partial pooling model plotted for each participant (I see this as the best solution)
data_exp_2_stair <- data_exp_2 %>%
filter(trial.type == "staircase")
mod_1_no <- glm(correct ~ target.contrast + subject + target.contrast:subject, data = data_exp_2_stair, family = 'binomial')
data_exp_2_stair$fitted <- fitted.values(mod_1_no)
data_exp_2_stair %>%
ggplot(aes(target.contrast, fitted)) +
geom_point() +
facet_wrap(~subject)
#second solution is just complete pooling and then plotting for each individual
mod_1_com <- glm(correct ~ target.contrast, data = data_exp_2_stair, family = 'binomial')
data_exp_2_stair$fitted <- fitted.values(mod_1_com)
data_exp_2_stair %>%
ggplot(aes(target.contrast, fitted)) +
geom_point() +
facet_wrap(~subject)
#third solution, making a function and a plot for each participant trough a for-loop
mod_mod = list()
plot_plot = list()
for (i in 1:length(unique(data_exp_2$subject))){
data_exp_2_stair <- data_exp_2 %>%
filter(trial.type == "staircase") %>%
filter(subject == i)
mod_1_no <- glm(correct ~ target.contrast, data = data_exp_2_stair, family = 'binomial')
mod_mod[[i]] <- mod_1_no
data_exp_2_stair$fitted <- fitted.values(mod_1_no)
plotty <- data_exp_2_stair %>%
ggplot(aes(target.contrast, fitted)) +
geom_point() +
ylim(0,1)
plot_plot[[i]] <- plotty
}
plot_plot
#I choose to continue with solution 1, since it is easier to manipulate
data_exp_2_stair <- data_exp_2 %>%
filter(trial.type == "staircase")
mod_1_no <- glm(correct ~ target.contrast + subject + target.contrast:subject, data = data_exp_2_stair, family = 'binomial')
mod_1_par <- glmer(correct ~ target.contrast + (target.contrast|subject), data = data_exp_2_stair, family = 'binomial')
data_exp_2_stair$fitted_no_pooling <- fitted.values(mod_1_no)
data_exp_2_stair$fitted_par_pooling <- fitted.values(mod_1_par)
data_exp_2_stair <- data_exp_2_stair %>%
pivot_longer(c(fitted_no_pooling, fitted_par_pooling))
data_exp_2_stair %>%
ggplot(aes()) +
geom_point(aes(target.contrast, value, colour = name)) +
facet_wrap(~subject) +
ylab("Fitted Values") +
xlab("Contrast of Target Stimulus") +
ggtitle("Plotting of No Pooling and Partial Pooling models")
data_exp_2_exp <- data_exp_2 %>%
filter(trial.type == "experiment")
#I pick four subjects by random
set.seed(1234)
random_subject <- sample(1:29, 4)
models <- list()
for (i in 1:length(random_subject)){
data_exp_2_exp_sub <- data_exp_2 %>%
filter(trial.type == "experiment") %>%
filter(subject == i)
mod_2_int <- lm(rt.obj~1, data = data_exp_2_exp_sub)
models[[i]] <- mod_2_int
title = paste(c('Normal QQ-plot of Subject', random_subject[i]), collapse=', ' )
qqnorm(resid(mod_2_int), main = title);qqline(resid(mod_2_int), col = 'green')
}
models <- list()
for (i in 1:length(random_subject)){
data_exp_2_exp_sub <- data_exp_2 %>%
filter(trial.type == "experiment") %>%
filter(subject == i)
mod_2_int <- lm(log(rt.obj)~1, data = data_exp_2_exp_sub)
models[[i]] <- mod_2_int
title = paste(c('Normal QQ-plot of Subject', random_subject[i]), collapse=', ' )
qqnorm(resid(mod_2_int), main = title);qqline(resid(mod_2_int), col = 'green')
}
data_exp_2_exp <- data_exp_2 %>%
filter(trial.type == "experiment")
mod_2_par_1 <- lmer(rt.obj ~ task + (1|subject), data = data_exp_2_exp, REML = F)
#mod_2_par_2 <- lmer(rt.obj ~ task + (task|subject), data = data_exp_2_exp, REML = F)
mod_2_par_3 <- lmer(rt.obj ~ task + (1|subject) + (1|pas), data = data_exp_2_exp, REML = F)
#mod_2_par_4 <- lmer(rt.obj ~ task + (task|subject) + (1|pas), data = data_exp_2_exp, REML = F)
mod_2_par_5 <- lmer(rt.obj ~ task + (1|subject) + (1|pas) + (1|trial), data = data_exp_2_exp, REML = F)
anova(mod_2_par_1, mod_2_par_2, mod_2_par_3, mod_2_par_4, mod_2_par_5)
data_exp_2_exp <- data_exp_2 %>%
filter(trial.type == "experiment")
mod_2_par_1 <- lmer(rt.obj ~ task + (1|subject), data = data_exp_2_exp, REML = F)
mod_2_par_2 <- lmer(rt.obj ~ task + (task|subject), data = data_exp_2_exp, REML = F)
mod_2_par_3 <- lmer(rt.obj ~ task + (1|subject) + (1|pas), data = data_exp_2_exp, REML = F)
mod_2_par_4 <- lmer(rt.obj ~ task + (task|subject) + (1|pas), data = data_exp_2_exp, REML = F)
mod_2_par_5 <- lmer(rt.obj ~ task + (1|subject) + (1|pas) + (1|trial), data = data_exp_2_exp, REML = F)
anova(mod_2_par_1, mod_2_par_2, mod_2_par_3, mod_2_par_4, mod_2_par_5)
r.squaredGLMM(mod_2_par_1)
r.squaredGLMM(mod_2_par_2)
r.squaredGLMM(mod_2_par_3)
r.squaredGLMM(mod_2_par_4)
r.squaredGLMM(mod_2_par_5)
summary(mod_2_par_3)
mod_2_par_6 <- lmer(rt.obj ~ task*pas + (1|subject), data = data_exp_2_exp, REML = F)
mod_2_par_7 <- lmer(rt.obj ~ task*pas + (1|subject) + (1|trial) + (1|target.type), data = data_exp_2_exp, REML = F)
mod_2_par_8 <- lmer(rt.obj ~ task*pas + (1|subject) + (1|trial) + (1|target.type) + (1|obj.resp), data = data_exp_2_exp, REML = F)
print(VarCorr(mod_2_par_8), comp = 'Variance')
## you can start from this if you want to, but you can also make your own from scratch
#data.count <- data.frame(count = numeric(),
#                         pas = numeric(), ## remember to make this into a factor afterwards
#                         task = numeric(), ## and this too
#                         subject = numeric()) ## and this too
data.count <- data_exp_2_exp %>%
group_by(subject, task, pas) %>%
summarise(count = n())
mod_3_par_1 <- lmer(count ~ task*pas + (pas|subject), data = data.count, REML = F)
mod_3_par_2 <- glmer(count ~ task*pas + (pas|subject), data = data.count, family = "poisson")
mod_3_par_2 <- glmer(count ~ task*pas + (pas|subject), data = data.count, family = "poisson")
mod_3_par_1 <- glmer(count ~ task*pas + (pas|subject), data = data.count, family = "poisson")
mod_3_par_1
mod_3_par_2 <- glmer(count ~ task*pas + (pas|subject), data = data.count, family = "poisson", control = glmerControl(optimize = "bobyqa"))
mod_3_par_2
mod_3_par_3 <- glmer(count ~ task + pas + (pas|subject), data = data.count, family = "poisson", control = glmerControl(optimize = "bobyqa"))
mod_3_par_2;mod_3_par_3
anova(mod_3_par_2, mod_3_par_3)
mod_3_par_4
mod_3_par_2
random_subject <- sample(1:29, 4)
plot_final <- list()
for (i in 1:length(random_subject)){
data.count$fitted <- fitted.values(mod_3_par_4)
plot_temp <- data.count %>%
filter(subject == random_subject[i]) %>%
ggplot(aes(pas, fitted, fill = pas)) +
geom_bar(stat = "identity") +
ggtitle(paste(c('Estimated amount of ratings for Subject', random_subject[i]), collapse=', ' )) + ylim(0,300) +
ylab("Estimated count") +
xlab("Perceptual Awareness Scale Rating")
plot_final[[i]] <- plot_temp
}
random_subject <- sample(1:29, 4)
plot_final <- list()
for (i in 1:length(random_subject)){
data.count$fitted <- fitted.values(mod_3_par_2)
plot_temp <- data.count %>%
filter(subject == random_subject[i]) %>%
ggplot(aes(pas, fitted, fill = pas)) +
geom_bar(stat = "identity") +
ggtitle(paste(c('Estimated amount of ratings for Subject', random_subject[i]), collapse=', ' )) + ylim(0,300) +
ylab("Estimated count") +
xlab("Perceptual Awareness Scale Rating")
plot_final[[i]] <- plot_temp
}
plot_final
data_exp_2_exp <- data_exp_2 %>%
filter(trial.type == "experiment")
mod_3_par_4 <- glmer(correct ~ task + (1|subject), data = data_exp_2_exp, family = "binomial")
mod_3_par_4
logit <-     function(x) log(x / (1 - x))
inv.logit <- function(x) exp(x) / (1 + exp(x))
inv.logit(1.11896)
inv.logit(1.11896 - 0.07496)
inv.logit(1.11896 + 0.16603)
mod_3_par_5 <- glmer(correct ~ task + pas + (1|subject), data = data_exp_2_exp, family = "binomial")
mod_3_par_5
mod_3_par_8 <- glmer(correct ~ pas + (1|subject), data = data_exp_2_exp, family = "binomial")
mod_3_par_8
mod_3_par_6 <- glmer(correct ~ pas + (1|subject), data = data_exp_2_exp, family = "binomial")
mod_3_par_6
mod_3_par_7 <- glmer(correct ~ pas*task + (1|subject), data = data_exp_2_exp, family = "binomial")
mod_3_par_7
anova(mod_3_par_4, mod_3_par_5, mod_3_par_6, mod_3_par_7)
knitr::opts_chunk$set(echo = TRUE)
pacman::p_load(tidyverse, lme4, readbulk, grid, gridExtra, MuMIn, dfoptim)
#third solution, making a function and a plot for each participant trough a for-loop. However, this is a messy solution
mod_mod = list()
plot_plot = list()
for (i in 1:length(unique(data_exp_2$subject))){
data_exp_2_stair <- data_exp_2 %>%
filter(trial.type == "staircase") %>%
filter(subject == i)
mod_1_no_pool <- glm(correct ~ target.contrast, data = data_exp_2_stair, family = 'binomial')
mod_mod[[i]] <- mod_1_no_pool
data_exp_2_stair$fitted <- fitted.values(mod_1_no_pool)
plotty <- data_exp_2_stair %>%
ggplot(aes(target.contrast, fitted)) +
geom_point() +
ylim(0,1) +
ggtitle(paste(c('Fitted values for Subject', data_exp_2$subject[i]), collapse=', ' ))
plot_plot[[i]] <- plotty
}
knitr::opts_chunk$set(echo = TRUE)
pacman::p_load(tidyverse, lme4, readbulk, grid, gridExtra, MuMIn, dfoptim)
data_exp_2 <- read_bulk("experiment_2", extension = ".csv")
head(data_exp_2)
data_exp_2$correct <- ifelse(grepl("odd", data_exp_2$target.type) & grepl("o", data_exp_2$obj.resp), 1, ifelse(grepl("even", data_exp_2$target.type) & grepl("e", data_exp_2$obj.resp), 1, 0))
#making it a factorial variable instead of numeric
data_exp_2$correct <- as.factor(data_exp_2$correct)
summary(data_exp_2)
data_exp_2$pas <- as.factor(data_exp_2$pas)
data_exp_2$subject <- as.factor(data_exp_2$subject)
#I was unsure, what you wanted us to do. So I have created 3 different solutions that I assessed to be equally probable of being the solution
#first solution, which is a partial pooling model plotted for each participant (I see this as the best solution)
data_exp_2_stair <- data_exp_2 %>%
filter(trial.type == "staircase")
mod_1_no <- glm(correct ~ target.contrast + subject + target.contrast:subject, data = data_exp_2_stair, family = 'binomial')
data_exp_2_stair$fitted <- fitted.values(mod_1_no)
data_exp_2_stair %>%
ggplot(aes(target.contrast, fitted)) +
geom_point() +
facet_wrap(~subject)
#second solution is just complete pooling and then plotting for each individual
mod_1_com <- glm(correct ~ target.contrast, data = data_exp_2_stair, family = 'binomial')
data_exp_2_stair$fitted <- fitted.values(mod_1_com)
data_exp_2_stair %>%
ggplot(aes(target.contrast, fitted)) +
geom_point() +
facet_wrap(~subject)
#third solution, making a function and a plot for each participant trough a for-loop. However, this is a messy solution
mod_mod = list()
plot_plot = list()
for (i in 1:length(unique(data_exp_2$subject))){
data_exp_2_stair <- data_exp_2 %>%
filter(trial.type == "staircase") %>%
filter(subject == i)
mod_1_no_pool <- glm(correct ~ target.contrast, data = data_exp_2_stair, family = 'binomial')
mod_mod[[i]] <- mod_1_no_pool
data_exp_2_stair$fitted <- fitted.values(mod_1_no_pool)
plotty <- data_exp_2_stair %>%
ggplot(aes(target.contrast, fitted)) +
geom_point() +
ylim(0,1) +
ggtitle(paste(c('Fitted values for Subject', data_exp_2$subject[i]), collapse=', ' ))
plot_plot[[i]] <- plotty
}
plot_plot
data_exp_2$subject[3]
data_exp_2$subject[5]
unique(data_exp_2$subject)[5]
#third solution, making a function and a plot for each participant trough a for-loop. However, this is a messy solution
mod_mod = list()
plot_plot = list()
for (i in 1:length(unique(data_exp_2$subject))){
data_exp_2_stair <- data_exp_2 %>%
filter(trial.type == "staircase") %>%
filter(subject == i)
mod_1_no_pool <- glm(correct ~ target.contrast, data = data_exp_2_stair, family = 'binomial')
mod_mod[[i]] <- mod_1_no_pool
data_exp_2_stair$fitted <- fitted.values(mod_1_no_pool)
plotty <- data_exp_2_stair %>%
ggplot(aes(target.contrast, fitted)) +
geom_point() +
ylim(0,1) +
ggtitle(paste(c('Fitted values for Subject', unique(data_exp_2$subject)[i]), collapse=', ' ))
plot_plot[[i]] <- plotty
}
plot_plot
