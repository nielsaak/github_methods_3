# design matrix
x_matrix <- model.matrix(model_quad)
# epsilon
error_quad <- model_quad$residuals
error_cube <- model_cube$residuals
data_plot_cube <- data_frame(y_org, y_fit_quad, y_fit_cube, x_val = x_matrix[,2])
plot_cube <- data_plot_cube %>%
ggplot(aes(x = x_val, y = y_org)) +
#  geom_segment(aes(xend = x_val, yend = y_fit, colour = "green")) +
geom_point(aes()) +
geom_point(aes(y = y_fit_quad, colour = "red")) +
geom_point(aes(y = y_fit_cube, colour = "blue"))
#  geom_smooth(method = "lm", formula = y~poly(x,2), colour = "pink", alpha = 0)
plot_cube
model_cube <- lm(mpg~wt+I(wt**2)+I(wt**3), data = mtcars)
#plot of fitted and original values
# Y
y_org <- model.frame(model_quad)[,1]
# Y_hat
y_fit_quad <- model_quad$fitted.values
y_fit_cube <- model_cube$fitted.values
# design matrix
x_matrix <- model.matrix(model_quad)
# epsilon
error_quad <- model_quad$residuals
error_cube <- model_cube$residuals
data_plot_cube <- data_frame(y_org, y_fit_quad, y_fit_cube, x_val = x_matrix[,2])
plot_cube <- data_plot_cube %>%
ggplot(aes(x = x_val, y = y_org)) +
#  geom_segment(aes(xend = x_val, yend = y_fit, colour = "green")) +
geom_point(aes()) +
geom_point(aes(y = y_fit_quad, colour = "blue")) +
geom_point(aes(y = y_fit_cube, colour = "red"))
#  geom_smooth(method = "lm", formula = y~poly(x,2), colour = "pink", alpha = 0)
plot_cube
model_cube <- lm(mpg~wt+I(wt**2)+I(wt**3), data = mtcars)
#plot of fitted and original values
# Y
y_org <- model.frame(model_quad)[,1]
# Y_hat
y_fit_quad <- model_quad$fitted.values
y_fit_cube <- model_cube$fitted.values
# design matrix
x_matrix <- model.matrix(model_quad)
# epsilon
error_quad <- model_quad$residuals
error_cube <- model_cube$residuals
data_plot_cube <- data_frame(y_org, y_fit_quad, y_fit_cube, x_val = x_matrix[,2])
plot_cube <- data_plot_cube %>%
ggplot(aes(x = x_val)) +
#  geom_segment(aes(xend = x_val, yend = y_fit, colour = "green")) +
geom_point(aes(y = y_org, colour = green) +
geom_point(aes(y = y_fit_quad, colour = "blue")) +
geom_point(aes(y = y_fit_cube, colour = "red"))
#  geom_smooth(method = "lm", formula = y~poly(x,2), colour = "pink", alpha = 0)
plot_cube
model_cube <- lm(mpg~wt+I(wt**2)+I(wt**3), data = mtcars)
#plot of fitted and original values
# Y
y_org <- model.frame(model_quad)[,1]
# Y_hat
y_fit_quad <- model_quad$fitted.values
y_fit_cube <- model_cube$fitted.values
# design matrix
x_matrix <- model.matrix(model_quad)
# epsilon
error_quad <- model_quad$residuals
error_cube <- model_cube$residuals
data_plot_cube <- data_frame(y_org, y_fit_quad, y_fit_cube, x_val = x_matrix[,2])
plot_cube <- data_plot_cube %>%
ggplot(aes(x = x_val)) +
#  geom_segment(aes(xend = x_val, yend = y_fit, colour = "green")) +
geom_point(aes(y = y_org, colour = "green")) +
geom_point(aes(y = y_fit_quad, colour = "blue")) +
geom_point(aes(y = y_fit_cube, colour = "red"))
#  geom_smooth(method = "lm", formula = y~poly(x,2), colour = "pink", alpha = 0)
plot_cube
eps_cube <- model_cube$residuals
SSE_cube <- sum(eps_cube**2)
SSE_lin;SSE_quad;SSE_cube
model_cube$coefficients[4]
#well, as we can see the beta parameter for the cubic part of the model is really low, so even though wt^3 would create rather large values, this parameter would make the number less meaningful. On a conceptual level this parameter shows that the cubic part does not have a very large influence on the dependent variable.
model_quad$coefficients
model_cube$coefficients
lm(mpg ~ 1, data=mtcars)
lm(mpg ~ 1, data=mtcars)
#the mean
#demonstration
mean(mpg)
lm(mpg ~ 1, data=mtcars)
#the mean
#demonstration
mean(mtcars$mpg)
data(mtcars)
logistic.model <- glm(formula=am~wt, data=mtcars, family='binomial')
logistic.model
logit <-     function(x) log(x / (1 - x))
inv.logit <- function(x) exp(x) / (1 + exp(x))
#plot
plot(mtcars$wt,logistic.model$fitted.values)
logistic.model$coefficients[1]
x_org <- mtcars$wt
y_hat <- inv.logit(logistic.model$coefficients[1]+logistic.model$coefficients[2]*x)
plot(x,y_hat)
inv.logit(logistic.model$coefficients[1])
y_pontiac <- inv.logit(logistic.model$coefficients[1]+logistic.model$coefficients[2]*mtcars[25,6])
y_pontiac
logistic.model_quad <- glm(formula=am~wt+I(wt**2), data=mtcars, family='binomial')
# Y_hat
y_fit_ <- logistic.model$fitted.values
y_fit_quad <- logistic.model_quad$fitted.values
# x-values
x_org <- mtcars$wt
data_plot_log_quad <- data_frame(y_fit, y_fit_quad, x_org)
plot_log_quad <- data_plot_log_quad %>%
ggplot(aes(x = x_org)) +
#  geom_segment(aes(xend = x_val, yend = y_fit, colour = "green")) +
geom_point(aes(y = y_fit, colour = "green")) +
geom_point(aes(y = y_fit_quad, colour = "blue"))
#  geom_smooth(method = "lm", formula = y~poly(x,2), colour = "pink", alpha = 0)
plot_log_quad
plot(mtcars$wt,logistic.model_quad$fitted.values)
logistic.model_quad <- glm(formula=am~wt+I(wt**2), data=mtcars, family='binomial')
# Y_hat
y_fit_ <- logistic.model$fitted.values
y_fit_quad <- logistic.model_quad$fitted.values
# x-values
x_org <- mtcars$wt
data_plot_log_quad <- data_frame(y_fit, y_fit_quad, x_org)
plot_log_quad <- data_plot_log_quad %>%
ggplot(aes(x = x_org)) +
geom_point(aes(y = y_fit, colour = "green")) +
geom_point(aes(y = y_fit_quad, colour = "blue"))
plot_log_quad
logistic.model_quad <- glm(formula=am~wt+I(wt**2), data=mtcars, family='binomial')
# Y_hat
y_fit_ <- logistic.model$fitted.values
y_fit_quad <- logistic.model_quad$fitted.values
# x-values
x_org <- mtcars$wt
data_plot_log_quad <- data_frame(y_fit, y_fit_quad, x_org)
plot_log_quad <- data_plot_log_quad %>%
ggplot(aes(x = x_org)) +
geom_point(aes(y = y_fit, colour = "green"))
#  geom_point(aes(y = y_fit_quad, colour = "blue"))
plot_log_quad
logistic.model_quad <- glm(formula=am~wt+I(wt**2), data=mtcars, family='binomial')
# Y_hat
y_fit_ <- logistic.model$fitted.values
y_fit_quad <- logistic.model_quad$fitted.values
# x-values
x_org <- mtcars$wt
data_plot_log_quad <- data_frame(y_fit, y_fit_quad, x_org)
plot_log_quad <- data_plot_log_quad %>%
ggplot(aes(x = x_org, y = y_fit)) +
geom_point()
#  geom_point(aes(y = y_fit_quad, colour = "blue"))
plot_log_quad
logistic.model_quad <- glm(formula=am~wt+I(wt**2), data=mtcars, family='binomial')
# Y_hat
y_fit_ <- logistic.model$fitted.values
y_fit_quad <- logistic.model_quad$fitted.values
# x-values
x_org <- mtcars$wt
data_plot_log_quad <- data_frame(y_fit_, y_fit_quad, x_org)
plot_log_quad <- data_plot_log_quad %>%
ggplot(aes(x = x_org)) +
geom_point(aes(y = y_fit, colour = "green")) +
geom_point(aes(y = y_fit_quad, colour = "blue"))
plot_log_quad
logistic.model_quad <- glm(formula=am~wt+I(wt**2), data=mtcars, family='binomial')
# Y_hat
y_fit_ <- logistic.model$fitted.values
y_fit_quad <- logistic.model_quad$fitted.values
# x-values
x_org <- mtcars$wt
data_plot_log_quad <- data_frame(y_fit_, y_fit_quad, x_org)
plot_log_quad <- data_plot_log_quad %>%
ggplot(aes(x = x_org)) +
geom_point(aes(y = y_fit_, colour = "green")) +
geom_point(aes(y = y_fit_quad, colour = "blue"))
plot_log_quad
logistic.model$coefficients
logistic.model_quad
logistic.model$coefficients
logistic.model_quad$coefficients
AIC(logistic.model)
AIC(logistic.model_quad)
AIC(logistic.model)
AIC(logistic.model_quad)
logistic.model
logistic.model_quad
logistic.model$deviance
logistic.model$deviance;logistic.model$aic;logistic.model_quad$deviance;logistic.model_quad$aic
install.packages("lme4")
library(lme4)
mixed.model <- lmer(mpg ~ wt + (1 | cyl), data=mtcars)
par(font.lab=2, font.axis=2, cex=1.2)
plot(mtcars$wt, fitted.values(mixed.model),
main='Linear regression with group intercepts (n cylinders)',
xlab='Weight (lb/1000)', ylab='Miles/(US) gallon',
pch=3)
mixed.model <- lmer(mpg ~ wt + (wt | cyl), data=mtcars)
plot(mtcars$wt, fitted.values(mixed.model),
main='Linear regression with group intercepts and group slopes (n cylinders)',
xlab='Weight (lb/1000)', ylab='Miles/(US) gallon',
pch=3)
guess_prob = c()
for (i in length(mtcars)){
temp = inv.logit(logistic.model$coefficients[1]+logistic.model$coefficients[2]*mtcars[i,6])
if (temp >= 0.5) {
guess_prob <- append(1)
} else {
guess_prob <- append(0)
}
}
guess_prob = c()
for (i in length(mtcars)){
temp = inv.logit(logistic.model$coefficients[1]+logistic.model$coefficients[2]*mtcars[i,6])
if (temp >= 0.5) {
guess_prob <- append(guess_prob, 1)
} else {
guess_prob <- append(guess_prob, 0)
}
}
mtcars_new <- mtcars
mtcars_new$best_guess <- guess_prob
View(mtcars_new)
inv.logit(logistic.model$coefficients[1]+logistic.model$coefficients[2]*mtcars[5,6]
inv.logit(logistic.model$coefficients[1]+logistic.model$coefficients[2]*mtcars[5,6])
inv.logit(logistic.model$coefficients[1]+logistic.model$coefficients[2]*mtcars[5,6])
inv.logit(logistic.model$coefficients[1]+logistic.model$coefficients[2]*mtcars[5,6])>0.1
inv.logit(logistic.model$coefficients[1]+logistic.model$coefficients[2]*mtcars[3,6])
inv.logit(logistic.model$coefficients[1]+logistic.model$coefficients[2]*mtcars[3,6])>=0.5
inv.logit(as.integer(logistic.model$coefficients[1])+as.integer(logistic.model$coefficients[2])*mtcars[3,6])
guess_prob = c()
for (i in length(mtcars)){
temp = inv.logit(as.integer(logistic.model$coefficients[1])+as.integer(logistic.model$coefficients[2])*mtcars[i,6])
if (temp >= 0.5) {
guess_prob <- append(guess_prob, 1)
} else {
guess_prob <- append(guess_prob, 0)
}
}
mtcars_new <- mtcars
mtcars_new$best_guess <- guess_prob
View(mtcars_new)
guess_prob = list()
for (i in length(mtcars)){
temp = inv.logit(as.integer(logistic.model$coefficients[1])+as.integer(logistic.model$coefficients[2])*mtcars[i,6])
if (temp >= 0.5) {
guess_prob <- append(guess_prob, 1)
} else {
guess_prob <- append(guess_prob, 0)
}
}
mtcars_new <- mtcars
mtcars_new$best_guess <- guess_prob
View(guess_prob)
guess_prob = list()
for (i in length(mtcars)){
temp = inv.logit(as.integer(logistic.model$coefficients[1])+as.integer(logistic.model$coefficients[2])*mtcars[i,6])
if (temp >= 0.5) {
guess_prob[[length(guess_prob) + i]] <- 1
} else {
guess_prob[[length(guess_prob) + i]] <- 0
}
}
#mtcars_new <- mtcars
#mtcars_new$best_guess <- guess_prob
View(guess_prob)
guess_prob = c()
for (i in length(mtcars)){
temp = inv.logit(as.integer(logistic.model$coefficients[1])+as.integer(logistic.model$coefficients[2])*mtcars[i,6])
if (temp >= 0.5) {
guess_prob[length(guess_prob) + i] <- 1
} else {
guess_prob[length(guess_prob) + i] <- 0
}
}
#mtcars_new <- mtcars
#mtcars_new$best_guess <- guess_prob
guess_prob = c()
for (i in length(mtcars)){
temp = inv.logit(as.integer(logistic.model$coefficients[1])+as.integer(logistic.model$coefficients[2])*mtcars[i,6])
if (temp >= 0.5) {
guess_prob[length(guess_prob) + 1] <- 1
} else {
guess_prob[length(guess_prob) + 1] <- 0
}
}
#mtcars_new <- mtcars
#mtcars_new$best_guess <- guess_prob
guess_prob = list()
for (i in length(mtcars)){
temp = inv.logit(as.integer(logistic.model$coefficients[1])+as.integer(logistic.model$coefficients[2])*mtcars[i,6])
if (temp >= 0.5) {
guess_prob[length(guess_prob) + 1] <- 1
} else {
guess_prob[length(guess_prob) + 1] <- 0
}
}
#mtcars_new <- mtcars
#mtcars_new$best_guess <- guess_prob
guess_prob = c()
for (i in length(mtcars)){
temp = inv.logit(as.integer(logistic.model$coefficients[1])+as.integer(logistic.model$coefficients[2])*mtcars[i,6])
if (temp >= 0.5) {
c(guess_prob, 1)
} else {
c(guess_prob, 0)
}
}
#mtcars_new <- mtcars
#mtcars_new$best_guess <- guess_prob
guess_prob = c()
for (i in length(mtcars)){
temp = inv.logit(as.integer(logistic.model$coefficients[1])+as.integer(logistic.model$coefficients[2])*mtcars[i,6])
if (temp >= 0.5) {
guess_prob <- c(guess_prob, 1)
} else {
guess_prob <- c(guess_prob, 0)
}
}
#mtcars_new <- mtcars
#mtcars_new$best_guess <- guess_prob
#mtcars_new <- mtcars
#mtcars_new$best_guess <- guess_prob
guess_prob
#mtcars_new <- mtcars
#mtcars_new$best_guess <- guess_prob
guess_prob <- c(guess_prob, 3)
guess_prob
guess_prob = c()
guess_prob = c()
temp = inv.logit(as.integer(logistic.model$coefficients[1])+as.integer(logistic.model$coefficients[2])*mtcars[5,6])
if (temp >= 0.5) {
guess_prob <- c(guess_prob, 1)
} else {
guess_prob <- c(guess_prob, 0)
}
temp = inv.logit(as.integer(logistic.model$coefficients[1])+as.integer(logistic.model$coefficients[2])*mtcars[6,6])
if (temp >= 0.5) {
guess_prob <- c(guess_prob, 1)
} else {
guess_prob <- c(guess_prob, 0)
}
temp = inv.logit(as.integer(logistic.model$coefficients[1])+as.integer(logistic.model$coefficients[2])*mtcars[7,6])
if (temp >= 0.5) {
guess_prob <- c(guess_prob, 1)
} else {
guess_prob <- c(guess_prob, 0)
}
temp = inv.logit(as.integer(logistic.model$coefficients[1])+as.integer(logistic.model$coefficients[2])*mtcars[8,6])
if (temp >= 0.5) {
guess_prob <- c(guess_prob, 1)
} else {
guess_prob <- c(guess_prob, 0)
}
temp = inv.logit(as.integer(logistic.model$coefficients[1])+as.integer(logistic.model$coefficients[2])*mtcars[15,6])
temp = inv.logit(as.integer(logistic.model$coefficients[1])+as.integer(logistic.model$coefficients[2])*mtcars[15,6])
temp = inv.logit(as.integer(logistic.model$coefficients[1])+as.integer(logistic.model$coefficients[2])*mtcars[18,6])
if (temp >= 0.5) {
guess_prob <- c(guess_prob, 1)
} else {
guess_prob <- c(guess_prob, 0)
}
length(mtcars)
guess_prob = c()
for (i in nrow(mtcars)) {
temp = inv.logit(as.integer(logistic.model$coefficients[1])+as.integer(logistic.model$coefficients[2])*mtcars[i,6])
if (temp >= 0.5) {
guess_prob <- c(guess_prob, 1)
} else {
guess_prob <- c(guess_prob, 0)
}
}
#mtcars_new <- mtcars
#mtcars_new$best_guess <- guess_prob
guess_prob = c()
for (i in nrow(mtcars)) {
temp = inv.logit(as.integer(logistic.model$coefficients[1])+as.integer(logistic.model$coefficients[2])*mtcars[i,6])
if (temp >= 0.5) {
guess_prob <- c(guess_prob, 1)
} else {
guess_prob <- c(guess_prob, 0)
}
}
for (i in nrow(mtcars)) {
temp = inv.logit(as.integer(logistic.model$coefficients[1])+as.integer(logistic.model$coefficients[2])*mtcars[i,6])
if (temp >= 0.5) {guess_prob <- c(guess_prob, 1)}
else {guess_prob <- c(guess_prob, 0)}
}
#mtcars_new <- mtcars
#mtcars_new$best_guess <- guess_prob
for (i in nrow(mtcars)) {
temp = inv.logit(as.integer(logistic.model$coefficients[1])+as.integer(logistic.model$coefficients[2])*mtcars[i,6])
if (temp >= 0.5) {guess_prob <- c(guess_prob, 1)}
else {guess_prob <- c(guess_prob, 0)}
}
#mtcars_new <- mtcars
#mtcars_new$best_guess <- guess_prob
#mtcars_new <- mtcars
#mtcars_new$best_guess <- guess_prob
nrow(mtcars)
matches <- list(c(2,1),c(5,2),c(6,3))
for (match in matches){
if (match[1] > match[2]){
print("Win")
} else {
print ("Lose")
}
}
guess_prob <- list()
for (i in nrow(mtcars)){
temp = inv.logit(as.integer(logistic.model$coefficients[1])+as.integer(logistic.model$coefficients[2])*mtcars[i,6])
if (temp >= 0.5){
guess_prob <- list(guess_prob, 1)
} else {
guess_prob <- c(guess_prob, 0)
}
}
View(guess_prob)
guess_prob <- c()
for (i in nrow(mtcars)){
temp = inv.logit(as.integer(logistic.model$coefficients[1])+as.integer(logistic.model$coefficients[2])*mtcars[i,6])
if (temp >= 0.5){
guess_prob <- c(guess_prob, 1)
} else {
guess_prob <- c(guess_prob, 0)
}
}
for (i in range(nrow(mtcars))) {
temp = inv.logit(as.integer(logistic.model$coefficients[1])+as.integer(logistic.model$coefficients[2])*mtcars[i,6])
if (temp >= 0.5) {guess_prob <- c(guess_prob, 1)}
else {guess_prob <- c(guess_prob, 0)}
}
#mtcars_new <- mtcars
#mtcars_new$best_guess <- guess_prob
guess_prob = c()
for (i in 1:nrow(mtcars)) {
temp = inv.logit(as.integer(logistic.model$coefficients[1])+as.integer(logistic.model$coefficients[2])*mtcars[i,6])
if (temp >= 0.5) {guess_prob <- c(guess_prob, 1)}
else {guess_prob <- c(guess_prob, 0)}
}
guess_prob = c()
for (i in 1:nrow(mtcars)) {
temp = inv.logit(as.integer(logistic.model$coefficients[1])+as.integer(logistic.model$coefficients[2])*mtcars[i,6])
if (temp >= 0.5) {guess_prob <- c(guess_prob, 1)}
else {guess_prob <- c(guess_prob, 0)}
}
mtcars_new <- mtcars
mtcars_new$best_guess <- guess_prob
View(mtcars_new)
mtcars_new$wrong <- if (mtcars_new$best_guess == mtcars_new$am) {
0
} else {
1
}
View(mtcars_new)
wrong = c()
for (i in 1:nrow(mtcars)) {
temp = inv.logit(as.integer(logistic.model$coefficients[1])+as.integer(logistic.model$coefficients[2])*mtcars[i,6])
if (temp >= 0.5) {guess_prob <- 1}
else {guess_prob <- 0}
if (mtcars$am == guess_prob) {
wrong <- c(wrong, 0)
} else {
wrong <- c(wrong, 1)
}
}
mtcars_new <- mtcars
mtcars_new$wrong <- wrong
wrong = c()
for (i in 1:nrow(mtcars)) {
temp = inv.logit(as.integer(logistic.model$coefficients[1])+as.integer(logistic.model$coefficients[2])*mtcars[i,6])
if (temp >= 0.5) {guess_prob <- 1}
else {guess_prob <- 0}
if (mtcars$am[i] == guess_prob) {
wrong <- c(wrong, 0)
} else {
wrong <- c(wrong, 1)
}
}
mtcars_new <- mtcars
mtcars_new$wrong <- wrong
View(mtcars_new)
wrong = c()
for (i in 1:nrow(mtcars)) {
temp = inv.logit(as.integer(logistic.model$coefficients[1])+as.integer(logistic.model$coefficients[2])*mtcars[i,6])
if (temp >= 0.5) {guess_prob <- 1}
else {guess_prob <- 0}
if (mtcars$am[i] == guess_prob) {
wrong <- c(wrong, 0)
} else {
wrong <- c(wrong, 1)
}
}
mtcars_new <- mtcars
mtcars_new$wrong <- wrong
# Y_hat
y_fit_ <- logistic.model$fitted.values
# x-values
x_org <- mtcars_new$wt
wrong <- mtcars_new$wrong
data_plot_log_wrong <- data_frame(y_fit_, x_org, wrong)
plot_log_wrong <- data_plot_log_wrong %>%
ggplot(aes(x = x_org, y_fit_, colour = wrong)) +
geom_point()
plot_log_wrong
git status
$ git status
